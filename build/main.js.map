{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport io_package from '../io-package.json';\nimport 'source-map-support/register';\nimport { ProviderController } from './lib/provider.js';\nimport { Library } from './lib/library.js';\nimport * as messagesDef from './lib/def/messages-def';\nimport * as providerDef from './lib/def/provider-def';\nimport * as NotificationType from './lib/def/notificationService-def';\nimport { notificationServiceDefaults } from './lib/def/notificationService-def';\nimport { statesObjectsWarnings } from './lib/def/definition.js';\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass WeatherWarnings extends utils.Adapter {\n    startDelay: ioBroker.Timeout | undefined = undefined;\n    library: Library;\n    providerController: ProviderController | null = null;\n    numOfRawWarnings: number = 5;\n    adminTimeoutRef: any = null;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'weather-warnings',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.library = new Library(this);\n        this.providerController = new ProviderController(this);\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        if (!this.providerController) {\n            throw new Error('Provider controller doesnt exists.');\n        }\n        this.subscribeForeignObjects('system.config');\n\n        // dynamic create of configuration datapoint.\n        if (!Array.isArray(this.config.allowedDirs)) {\n            this.config.allowedDirs = [];\n        }\n        let i = 0;\n        let change = false;\n        let allowedDirsConfig = {};\n        while (i++ < 2) {\n            const allowedDirs = this.config.allowedDirs;\n\n            for (const a of providerDef.providerServicesArray) {\n                let hit = -1;\n                for (const b of allowedDirs) {\n                    if (b.providerService == a.replace('Service', '').toUpperCase()) {\n                        hit = Number(b);\n                        break;\n                    }\n                }\n                if (hit == -1) {\n                    change = true;\n                    this.config.allowedDirs.push({\n                        providerService: a.replace('Service', '').toUpperCase(),\n                        dpWarning: true,\n                        dpMessage: true,\n                        dpFormated: true,\n                        dpAlerts: true,\n                    });\n                }\n                //@ts-expect-error dann so\n                allowedDirsConfig[a] = this.config.allowedDirs[hit == -1 ? this.config.allowedDirs.length - 1 : hit];\n            }\n            if (providerDef.providerServicesArray.length != this.config.allowedDirs.length) {\n                this.config.allowedDirs = [];\n                allowedDirsConfig = {};\n                change = false;\n                continue;\n            }\n            break;\n        }\n        if (change) {\n            const obj = await this.getForeignObjectAsync(`system.adapter.${this.name}.${this.instance}`);\n            if (obj && obj.native) {\n                obj.native.allowedDirs = this.config.allowedDirs;\n                await this.setForeignObjectAsync(`system.adapter.${this.name}.${this.instance}`, obj);\n                this.log.warn('Fixed configuration for allowed datapoints! ');\n            }\n        }\n\n        try {\n            //const states = await self.getStatesAsync('*');\n            await this.library.init();\n            this.providerController.setAllowedDirs(allowedDirsConfig);\n            await this.library.initStates(await this.getStatesAsync('*'));\n        } catch (error) {\n            this.log.error(`catch(1): init error while reading states! ${error as string}`);\n        }\n        change = false;\n        const obj = await this.getForeignObjectAsync(`system.adapter.${this.name}.${this.instance}`);\n        //create template Help\n        if (obj) {\n            {\n                let reply = 'Tokens:\\n';\n                const keys = Object.keys(messagesDef.customFormatedTokensJson);\n                keys.sort();\n                for (const a of keys) {\n                    reply += `\\${${a}}: ${this.library.getTranslation(\n                        statesObjectsWarnings.allService.formatedkeys[\n                            a as keyof typeof statesObjectsWarnings.allService.formatedkeys\n                        ].common.name as string,\n                    )}\\n`;\n                }\n                reply = reply.slice(0, -1);\n                if (obj.native.templateHelp && obj.native.templateHelp.valueOf() != reply.valueOf()) {\n                    obj.native.templateHelp = reply;\n                    change = true;\n                    this.log.info('Update configuration. Reason: templateHelp');\n                }\n            }\n            {\n                let reply = ' ';\n                reply = Object.keys(messagesDef.genericWarntyp)\n                    //@ts-expect-error is keyof\n                    .map(a => messagesDef.genericWarntyp[a].id)\n                    .join(', ');\n                if (this.config.icons_description != reply) {\n                    obj.native.icons_description = reply;\n                    this.log.info('Update configuration. Reason: icons_description');\n                    change = true;\n                }\n            }\n            {\n                if (this.config.silentTime) {\n                    let update = false;\n                    for (const a of this.config.silentTime) {\n                        if (a.profil != undefined) {\n                            update = true;\n                        }\n                    }\n                    if (update) {\n                        this.log.debug('update config');\n                        change = true;\n                        obj.native.silentTime = [];\n                        this.log.info('Update configuration. Reason: silentTime');\n                    }\n                }\n            }\n            {\n                let sounds = obj.native.alexa2_sounds || [];\n                if (!sounds || !Array.isArray(sounds)) {\n                    sounds = [];\n                }\n                for (const w in messagesDef.genericWarntyp) {\n                    const index = sounds.findIndex(\n                        (a: { warntype: string; sound: string; warntypenumber: number }) =>\n                            a.warntypenumber == Number(w),\n                    );\n                    if (index != -1) {\n                        const t = this.library.getTranslation(\n                            messagesDef.genericWarntyp[Number(w) as keyof messagesDef.genericWarntypeType].name,\n                        );\n                        if (t != sounds[index].warntype) {\n                            sounds[index].warntype = t;\n                        }\n                    } else {\n                        sounds.push({\n                            warntypenumber: Number(w),\n                            warntype: this.library.getTranslation(\n                                messagesDef.genericWarntyp[Number(w) as keyof messagesDef.genericWarntypeType].name,\n                            ),\n                            sound: '',\n                        });\n                    }\n                }\n\n                const index = sounds.findIndex(\n                    (a: { warntype: string; sound: string; warntypenumber: number }) => a.warntypenumber == Number(0),\n                );\n                if (index == -1) {\n                    sounds.push({\n                        warntypenumber: Number(0),\n                        warntype: this.library.getTranslation('template.RemoveAllMessage'),\n                        sound: '',\n                    });\n                } else {\n                    const t = this.library.getTranslation('template.RemoveAllMessage');\n                    if (t != sounds[index].warntype) {\n                        sounds[index].warntype = t;\n                    }\n                }\n                if (JSON.stringify(obj.native.alexa2_sounds) != JSON.stringify(sounds)) {\n                    change = true;\n                    this.log.info('Update configuration. Reason: alexa2_sounds');\n                    obj.native.alexa2_sounds = sounds;\n                }\n            }\n\n            /** write default templates to config if template 0 == translation token */\n            if (\n                obj &&\n                obj.native &&\n                obj.native.templateTable[0] &&\n                obj.native.templateTable[0].template == 'template.NewMessage'\n            ) {\n                this.log.info(`First start after installation detected.`);\n                const templateTable: any = this.library.cloneGenericObject(obj.native.templateTable);\n                for (const a in obj.native.templateTable) {\n                    templateTable[a as keyof typeof this.config.templateTable].template = this.library.getTranslation(\n                        obj.native.templateTable[a].template,\n                    );\n                    this.log.debug(\n                        `Read default template from i18n: ${this.library.getTranslation(\n                            obj.native.templateTable[a].template,\n                        )}`,\n                    );\n                }\n                this.config.templateTable = templateTable;\n                this.log.info(`Write default templates to config for ${this.namespace}!`);\n\n                obj.native = { ...obj.native, templateTable: templateTable };\n                this.log.info('Update configuration. Reason: templateTable');\n                change = true;\n            }\n            if (change) {\n                await this.setForeignObjectAsync(`system.adapter.${this.name}.${this.instance}`, obj);\n                this.log.info('Update configuration: Done');\n            }\n        }\n\n        this.config.numOfRawWarnings =\n            typeof this.config.numOfRawWarnings == 'number' && this.config.numOfRawWarnings > 0\n                ? this.config.numOfRawWarnings\n                : 5;\n\n        this.startDelay = this.setTimeout(\n            async function (that: any) {\n                const self = that as WeatherWarnings;\n                if (!self) {\n                    return;\n                }\n                if (!self.providerController) {\n                    return;\n                }\n                if (self.providerController.unload) {\n                    return;\n                }\n\n                await self.providerController.init();\n                self.log.info(`Refresh Interval: ${self.providerController.refreshTime / 60000} minutes`);\n\n                const notificationServiceOpt: NotificationType.OptionsType = {};\n                for (const n of NotificationType.Array) {\n                    const notificationService = n;\n                    if (self.config[`${notificationService}_Enabled` as keyof ioBroker.AdapterConfig]) {\n                        const service: providerDef.providerServices[] = [];\n                        if (self.config[`${notificationService}_DwdEnabled` as keyof ioBroker.AdapterConfig]) {\n                            service.push('dwdService');\n                        }\n                        if (self.config[`${notificationService}_UwzEnabled` as keyof ioBroker.AdapterConfig]) {\n                            service.push('uwzService');\n                        }\n                        if (self.config[`${notificationService}_ZamgEnabled` as keyof ioBroker.AdapterConfig]) {\n                            service.push('zamgService');\n                        }\n                        const template: NotificationType.ActionsType = {\n                            new:\n                                self.config[`${notificationService}_MessageNew` as keyof ioBroker.AdapterConfig] !==\n                                undefined\n                                    ? (self.config[\n                                          `${notificationService}_MessageNew` as keyof ioBroker.AdapterConfig\n                                      ] as string)\n                                    : 'none',\n                            remove: self.config[\n                                `${notificationService}_MessageRemove` as keyof ioBroker.AdapterConfig\n                            ] as string,\n                            removeAll: self.config[\n                                `${notificationService}_MessageAllRemove` as keyof ioBroker.AdapterConfig\n                            ] as string,\n                            all:\n                                self.config[`${notificationService}_MessageAll` as keyof ioBroker.AdapterConfig] !==\n                                undefined\n                                    ? (self.config[\n                                          `${notificationService}_MessageAll` as keyof ioBroker.AdapterConfig\n                                      ] as string)\n                                    : self.config[\n                                            `${notificationService}_MessageNew` as keyof ioBroker.AdapterConfig\n                                        ] !== undefined\n                                      ? (self.config[\n                                            `${notificationService}_MessageNew` as keyof ioBroker.AdapterConfig\n                                        ] as string)\n                                      : 'none',\n                            manualAll:\n                                self.config[`${notificationService}_manualAll` as keyof ioBroker.AdapterConfig] !==\n                                undefined\n                                    ? (self.config[\n                                          `${notificationService}_manualAll` as keyof ioBroker.AdapterConfig\n                                      ] as string)\n                                    : 'none',\n                            removeManualAll:\n                                self.config[\n                                    `${notificationService}_removeManualAll` as keyof ioBroker.AdapterConfig\n                                ] !== undefined\n                                    ? (self.config[\n                                          `${notificationService}_removeManualAll` as keyof ioBroker.AdapterConfig\n                                      ] as string)\n                                    : 'none',\n                            title:\n                                self.config[`${notificationService}_Title` as keyof ioBroker.AdapterConfig] !==\n                                undefined\n                                    ? (self.config[\n                                          `${notificationService}_Title` as keyof ioBroker.AdapterConfig\n                                      ] as string)\n                                    : 'none',\n                        };\n                        for (const a in template) {\n                            const b = a as keyof NotificationType.ActionsType;\n                            if (template[b] == undefined) {\n                                continue;\n                            }\n                            template[b] = template[b] ? template[b] : 'none';\n                        }\n\n                        // @ts-expect-error keine ahnung :)\n                        notificationServiceOpt[notificationService] = {\n                            ...notificationServiceDefaults[notificationService],\n                            service: service,\n                            filter: {\n                                auto: {\n                                    level:\n                                        (self.config[\n                                            `${notificationService}_LevelFilter` as keyof ioBroker.AdapterConfig\n                                        ] as number) || -1,\n                                    type: (\n                                        (self.config[\n                                            `${notificationService}_TypeFilter` as keyof ioBroker.AdapterConfig\n                                        ] as string[]) || []\n                                    ).map(a => String(a)),\n                                },\n                                manual: {\n                                    level: (self.config[\n                                        `${notificationService}_ManualLevelFilter` as keyof ioBroker.AdapterConfig\n                                    ] as number)\n                                        ? (self.config[\n                                              `${notificationService}_ManualLevelFilter` as keyof ioBroker.AdapterConfig\n                                          ] as number)\n                                        : -1,\n                                    type: ((self.config[\n                                        `${notificationService}_ManualTypeFilter` as keyof ioBroker.AdapterConfig\n                                    ] as string[])\n                                        ? (self.config[\n                                              `${notificationService}_ManualTypeFilter` as keyof ioBroker.AdapterConfig\n                                          ] as string[])\n                                        : []\n                                    ).map(a => String(a)),\n                                },\n                            },\n                            adapter: self.config[\n                                `${notificationService}_Adapter` as keyof ioBroker.AdapterConfig\n                            ] as string,\n                            name: notificationService,\n                            actions: template,\n                            useadapter: true,\n                        };\n                        Object.assign(\n                            //@ts-expect-error verstehe ich nicht\n                            notificationServiceOpt[notificationService],\n                            notificationServiceDefaults[notificationService],\n                        );\n                    }\n                }\n                // hold this for some specialcases\n                if (self.config.telegram_Enabled && notificationServiceOpt.telegram != undefined) {\n                    notificationServiceOpt.telegram.withNoSound = self.config.telegram_withNoSound || false;\n                    notificationServiceOpt.telegram.userid = self.config.telegram_UserId || '';\n                    notificationServiceOpt.telegram.chatid = self.config.telegram_ChatID || '';\n                    notificationServiceOpt.telegram.parse_mode = self.config.telegram_parse_mode || 'none';\n                }\n                if (self.config.whatsapp_Enabled && notificationServiceOpt.whatsapp != undefined) {\n                    if (self.config.whatsapp_Phonenumber) {\n                        notificationServiceOpt.whatsapp.phonenumber = self.config.whatsapp_Phonenumber;\n                    }\n                }\n                if (self.config.pushover_Enabled && notificationServiceOpt.pushover != undefined) {\n                    notificationServiceOpt.pushover.sound = self.config.pushover_Sound || 'none';\n                    notificationServiceOpt.pushover.priority = self.config.pushover_Priority || false;\n                    notificationServiceOpt.pushover.device = self.config.pushover_Device || '';\n                }\n                if (self.config.gotify_Enabled && notificationServiceOpt.gotify != undefined) {\n                    notificationServiceOpt.gotify.priority =\n                        self.config.gotify_Priority !== undefined ? parseInt(self.config.gotify_Priority) : 0;\n                    notificationServiceOpt.gotify.contentType = self.config.gotify_contentType || 'text/plain';\n                }\n                if (self.config.json_Enabled && notificationServiceOpt.json != undefined) {\n                    // empty\n                }\n                if (self.config.history_Enabled && notificationServiceOpt.history != undefined) {\n                    // empty\n                }\n                if (self.config.email_Enabled && notificationServiceOpt.email != undefined) {\n                    notificationServiceOpt.email.actions.header = self.config.email_Header;\n                    notificationServiceOpt.email.actions.footer = self.config.email_Footer;\n                    notificationServiceOpt.email.recipients = self.config.email_Recipients;\n                }\n                if (self.config.alexa2_Enabled && notificationServiceOpt.alexa2 != undefined) {\n                    notificationServiceOpt.alexa2.volumen =\n                        self.config.alexa2_volumen > 0 ? String(self.config.alexa2_volumen) : '';\n                    notificationServiceOpt.alexa2.audio = self.config.alexa2_Audio || '';\n                    notificationServiceOpt.alexa2.sounds = self.config.alexa2_sounds || [];\n                    notificationServiceOpt.alexa2.sounds_enabled = self.config.alexa2_sounds_enabled || false;\n                    if (self.config.alexa2_device_ids.length == 0 || !self.config.alexa2_device_ids[0]) {\n                        self.log.error(`Missing devices for alexa - deactivated`);\n                        delete notificationServiceOpt.alexa2;\n                        self.config.alexa2_Enabled = false;\n                    } else if (self.config.alexa2_Adapter == 'none') {\n                        self.log.error(`Missing adapter for alexa - deactivated`);\n                        delete notificationServiceOpt.alexa2;\n                        self.config.alexa2_Enabled = false;\n                    }\n                }\n                if (self.config.sayit_Enabled && notificationServiceOpt.sayit != undefined) {\n                    notificationServiceOpt.sayit.volumen =\n                        self.config.sayit_volumen > 0 ? String(self.config.sayit_volumen) : '';\n                    if (\n                        self.config.sayit_Adapter_Array.length == 0 ||\n                        self.config.sayit_Adapter_Array[0].sayit_Adapter == 'none'\n                    ) {\n                        self.log.warn(`Missing adapter for sayit - deactivated`);\n                        delete notificationServiceOpt.sayit;\n                        self.config.sayit_Enabled = false;\n                    } else {\n                        notificationServiceOpt.sayit.adapters = self.config.sayit_Adapter_Array.map(\n                            a => a.sayit_Adapter,\n                        );\n                    }\n                }\n                try {\n                    await self.providerController.createNotificationService(notificationServiceOpt);\n                } catch {\n                    self.log.error('Execution interrupted - Please check your configuration. ---');\n                    return;\n                }\n                // dwdSelectID gegen Abfrage pr\u00FCfen und erst dann als valide erkl\u00E4ren.\n                for (const id of self.config.dwdwarncellTable) {\n                    if (self.config.dwdEnabled) {\n                        if (isNaN(id.dwdSelectId) || Number(id.dwdSelectId) < 10000) {\n                            self.log.warn(`DWD \"${id.dwdSelectId}\" warning cell is invalid.`);\n                            continue;\n                        }\n                        const options: providerDef.messageFilterTypeWithFilter & {\n                            [key: string]: any;\n                        } = {\n                            filter: {\n                                type: self.config.dwdTypeFilter,\n                                level: self.config.dwdLevelFilter,\n                                hours: self.config.dwdHourFilter,\n                            },\n                        };\n                        self.log.info(`DWD ${id.dwdSelectId} activated. Retrieve data.`);\n                        self.providerController.createProviderIfNotExist({\n                            ...options,\n                            service: 'dwdService',\n                            customName: id.dwdCityname,\n                            warncellId: String(id.dwdSelectId),\n                            providerController: self.providerController,\n                            language: self.config.dwdLanguage,\n                        });\n                    }\n                }\n\n                for (const id of self.config.zamgwarncellTable) {\n                    if (self.config.zamgEnabled && id && typeof id.zamgSelectId == 'string' && id.zamgSelectId) {\n                        self.log.info('ZAMG activated. Retrieve data.');\n                        const options: providerDef.messageFilterTypeWithFilter & {\n                            [key: string]: any;\n                        } = {\n                            filter: {\n                                type: self.config.zamgTypeFilter,\n                                level: self.config.zamgLevelFilter,\n                                hours: self.config.zamgHourFilter,\n                            },\n                        };\n                        const zamgArr = id.zamgSelectId.split('/') as [string, string];\n                        if (zamgArr.length == 2) {\n                            self.providerController.createProviderIfNotExist({\n                                ...options,\n                                service: 'zamgService',\n                                warncellId: zamgArr,\n                                language: self.config.zamgLanguage,\n                                providerController: self.providerController,\n                                customName: id.zamgCityname,\n                            });\n                        }\n                    }\n                }\n                const tempTable: any = JSON.parse(JSON.stringify(self.config.uwzwarncellTable));\n                for (const id of self.config.uwzwarncellTable) {\n                    if (self.config.uwzEnabled) {\n                        if (\n                            (id && typeof id.uwzSelectId == 'string' && id.uwzSelectId.split('/').length == 2) ||\n                            (id.realWarncell && typeof id.realWarncell === 'string')\n                        ) {\n                            if (!id.realWarncell) {\n                                const tempWarncell = await providerDef.UWZProvider.getWarncell(\n                                    id.uwzSelectId.split('/') as [string, string],\n                                    'uwzService',\n                                    self,\n                                );\n                                if (self.providerController.unload) {\n                                    return;\n                                }\n\n                                if (tempWarncell) {\n                                    id.realWarncell = tempWarncell;\n                                }\n                            }\n                            const options: providerDef.messageFilterTypeWithFilter = {\n                                filter: {\n                                    type: self.config.uwzTypeFilter,\n                                    level: self.config.uwzLevelFilter,\n                                    hours: self.config.uwzHourFilter,\n                                },\n                            };\n                            if (!id.realWarncell || typeof id.realWarncell !== 'string') {\n                                self.log.warn(`Dont find a UWZ warncell for ${id.uwzSelectId}!`);\n                                continue;\n                            }\n                            self.log.info('UWZ activated. Retrieve data.');\n                            self.providerController.createProviderIfNotExist({\n                                ...options,\n                                service: 'uwzService',\n                                warncellId: id.realWarncell,\n                                providerController: self.providerController,\n                                language: self.config.uwzLanguage,\n                                customName: id.uwzCityname,\n                            });\n                        } else {\n                            self.log.warn(\n                                `Something is wrong with uwz coordinates: ${id.uwzSelectId} or warncell: ${id.realWarncell}`,\n                            );\n                        }\n                    }\n                }\n                if (JSON.stringify(tempTable) != JSON.stringify(self.config.uwzwarncellTable)) {\n                    const obj = await self.getForeignObjectAsync(`system.adapter.${self.name}.${self.instance}`);\n                    if (obj) {\n                        self.log.debug('change config uwzwarncellTable');\n                        obj.native.uwzwarncellTable = tempTable;\n                        await self.setForeignObjectAsync(`system.adapter.${self.name}.${self.instance}`, obj);\n                    }\n                }\n                //clear tree\n                const holdStates = [];\n                const holdStates2 = [];\n                const reCheckStates = [];\n                for (const a of self.providerController.providers) {\n                    holdStates.push(a.name);\n                    reCheckStates.push(`${a.name}.formatedKeys`);\n                    reCheckStates.push(`${a.name}..warning`);\n                    for (let b = 0; b < self.config.numOfRawWarnings; b++) {\n                        holdStates2.push(`${a.name}.formatedKeys.${`00${b}`.slice(-2)}`);\n                        holdStates2.push(`${a.name}..warning.${`00${b}`.slice(-2)}`);\n                    }\n                }\n                holdStates.push('commands.');\n                holdStates.push('alerts.');\n                holdStates.push('info.connection');\n                holdStates.push('provider.activeWarnings_json');\n                holdStates.push('provider.history');\n                holdStates.push('provider.activeWarnings');\n                await self.library.cleanUpTree(holdStates, null, 3);\n                await self.library.cleanUpTree(holdStates2, reCheckStates, 5);\n\n                await self.providerController.finishInit();\n\n                self.providerController.updateEndless().catch(() => {});\n                await self.providerController.updateAlertEndless();\n            },\n            2000,\n            this,\n        );\n    }\n\n    /**\n     * Is called when the adapter is unloaded.\n     *\n     * @param callback - function that must be called when the unload is finished.\n     *                  The callback is called with one argument: `null`.\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            if (this.startDelay) {\n                this.clearTimeout(this.startDelay);\n            }\n            if (this.providerController) {\n                await this.providerController.delete();\n            }\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    /**\n     * Is called when an object is changed\n     *\n     * @param id - id of the object that changed\n     * @param obj - the changed object\n     * @returns - a promise that resolves to void\n     */\n    private async onObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n        if (obj) {\n            // The object was changed\n            if (id == 'system.config') {\n                if (await this.library.setLanguage(obj.common.language)) {\n                    if (this.providerController) {\n                        await this.providerController.updateMesssages();\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Is called when a state changes\n     *\n     * @param id - id of the state that changed\n     * @param state - the new state\n     * @returns - a promise that resolves to void\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (!state) {\n            return;\n        }\n        if (state.ack) {\n            return;\n        }\n        this.library.setdb(id.replace(`${this.namespace}.`, ''), 'state', state.val, undefined, state.ack, state.ts);\n\n        if (await this.providerController!.onStatePush(id)) {\n            return;\n        }\n        if (await this.providerController!.clearHistory(id)) {\n            return;\n        }\n        if (await this.providerController!.setSpeakAllowed(id)) {\n            return;\n        }\n    }\n\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            console.log(`Retrieve ${obj.command} from ${obj.from} message: ${JSON.stringify(obj)}`);\n            let connected = true;\n            let state;\n            switch (String(obj.command)) {\n                case 'weekdays':\n                    {\n                        this.sendTo(\n                            obj.from,\n                            obj.command,\n                            [\n                                {\n                                    label: this.library.getTranslation('Monday'),\n                                    value: '1',\n                                },\n                                {\n                                    label: this.library.getTranslation('Tuesday'),\n                                    value: '2',\n                                },\n                                {\n                                    label: this.library.getTranslation('Wednesday'),\n                                    value: '3',\n                                },\n                                {\n                                    label: this.library.getTranslation('Thursday'),\n                                    value: '4',\n                                },\n                                {\n                                    label: this.library.getTranslation('Friday'),\n                                    value: '5',\n                                },\n                                {\n                                    label: this.library.getTranslation('Saturday'),\n                                    value: '6',\n                                },\n                                {\n                                    label: this.library.getTranslation('Sunday'),\n                                    value: '0',\n                                },\n                            ],\n                            obj.callback,\n                        );\n                    }\n                    break;\n                /*case 'alexa_audio':\n                    {\n                        this.sendTo(\n                            obj.from,\n                            obj.command,\n                            {\n                                openUrl:\n                                    'https://developer.amazon.com/en-US/docs/alexa/custom-skills/ask-soundlibrary.html',\n                                window: '_blank',\n                            },\n                            obj.callback,\n                        );\n                    }\n                    break;*/\n                case 'alexa2_device_ids':\n                    {\n                        const data: any[] = [];\n                        if (obj.message.adapter != 'none') {\n                            /* Wenn Doku oder testbar dann so:\n                            const test = await this.getObjectViewAsync('system', 'device', {\n                                startkey: `${obj.message.adapter}.`,\n                                endkey: `${obj.message.adapter}.\\u9999`,\n                            });\n                            */\n                            const objs = await this.getForeignObjectsAsync(`${obj.message.adapter}.Echo-Devices.*`);\n                            for (const a in objs) {\n                                if (a.endsWith('.Commands.speak')) {\n                                    const channel = await this.getForeignObjectAsync(\n                                        a.split('.').slice(0, 4).join('.'),\n                                    );\n                                    if (channel) {\n                                        data.push({\n                                            value: a.split('.')[3],\n                                            label: channel.common.name,\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                        this.sendTo(obj.from, obj.command, data, obj.callback);\n                    }\n                    break;\n\n                /** defaults for templates */\n                case 'addDefault':\n                case 'restoreDefault':\n                    {\n                        let data: any = {};\n                        if (obj.message.service == 'template') {\n                            data = {\n                                native: {\n                                    templateTable: this.library.cloneGenericObject(io_package.native.templateTable),\n                                },\n                            };\n                            if (obj.command == 'addDefault') {\n                                const obj = await this.getForeignObjectAsync(\n                                    `system.adapter.${this.name}.${this.instance}`,\n                                );\n                                if (obj && obj.native && obj.native.templateTable) {\n                                    const config = obj.native.templateTable;\n                                    for (const a of data.native.templateTable) {\n                                        const index = config.findIndex((b: any) => b.templateKey == a.templateKey);\n                                        if (index == -1) {\n                                            config.push(a);\n                                        }\n                                    }\n                                    data.native.templateTable = config;\n                                }\n                            }\n                            for (const a in data.native.templateTable) {\n                                const key = data.native.templateTable[a].template;\n                                data.native.templateTable[a].template = this.library.getTranslation(key);\n                            }\n                        } else {\n                            data = { native: {} };\n                            [\n                                `${obj.message.service}_MessageNew`,\n                                `${obj.message.service}_MessageRemove`,\n                                `${obj.message.service}_MessageAllRemove`,\n                                `${obj.message.service}_MessageAll`,\n                            ].forEach(a => {\n                                data.native[a] = io_package.native[a as keyof typeof io_package.native];\n                            });\n                        }\n                        this.sendTo(obj.from, obj.command, data, obj.callback);\n                    }\n                    break;\n                case 'Messages':\n                    {\n                        if (obj.message.service) {\n                            const templates = this.config.templateTable;\n                            const reply = [\n                                {\n                                    label: `none`,\n                                    value: `none`,\n                                },\n                            ];\n                            for (const t of templates) {\n                                if (t.templateKey !== '' && !t.templateKey.startsWith('_')) {\n                                    reply.push({\n                                        label: `${t.templateKey}`,\n                                        value: `${t.templateKey}`,\n                                    });\n                                }\n                            }\n                            //this.log.debug(obj.command + ': ' + JSON.stringify(reply));\n                            this.sendTo(obj.from, obj.command, reply, obj.callback);\n                        } else {\n                            this.sendTo(obj.from, obj.command, [], obj.callback);\n                            this.log.warn(\n                                `warn(44): Retrieve message with ${obj.command}, but without obj.message.service`,\n                            );\n                        }\n                    }\n\n                    break;\n                case 'notificationService':\n                    {\n                        if (obj.message && obj.message.service) {\n                            const temp: { [key: number]: boolean } = {};\n                            try {\n                                const objs = await this.getObjectViewAsync('system', 'instance', {\n                                    startkey: `system.adapter.${obj.message.service}.`,\n                                    endkey: `system.adapter.${obj.message.service}.\\u9999`,\n                                });\n\n                                if (objs && objs.rows) {\n                                    for (const row of objs.rows) {\n                                        const instance = Number(row.id.split('.')[3]);\n                                        if (instance !== undefined) {\n                                            temp[instance] = true;\n                                        }\n                                    }\n                                }\n                            } catch (error) {\n                                this.log.error(`error(44): ${error as string}`);\n                            }\n\n                            const reply = [{ label: 'none', value: 'none' }];\n\n                            for (const t in temp) {\n                                reply.push({\n                                    label: `${obj.message.service}.${t}`,\n                                    value: `${obj.message.service}.${t}`,\n                                });\n                            }\n                            //this.log.debug(obj.command + ': ' + JSON.stringify(reply));\n                            this.sendTo(obj.from, obj.command, reply, obj.callback);\n                        }\n                    }\n                    break;\n                case 'filterLevel':\n                    if (obj.callback) {\n                        const reply = [];\n                        const text = messagesDef.textLevels.textGeneric;\n                        for (const a in text) {\n                            switch (a) {\n                                case '0':\n                                case '1':\n                                case '2':\n                                case '3':\n                                case '4': {\n                                    reply.push({\n                                        label: this.library.getTranslation(\n                                            messagesDef.textLevels.textGeneric[a as unknown as keyof typeof text],\n                                        ),\n                                        value: Number(a),\n                                    });\n                                    break;\n                                }\n                            }\n                            if (Number(a) == 5) {\n                                break;\n                            }\n                        }\n                        //this.log.debug(obj.command + ': ' + JSON.stringify(reply));\n                        this.sendTo(obj.from, obj.command, reply, obj.callback);\n                    }\n                    break;\n                case 'filterType':\n                    if (obj.callback) {\n                        const reply = [];\n                        if (\n                            obj.message &&\n                            obj.message.service &&\n                            providerDef.providerServicesArray.indexOf(obj.message.service) != -1\n                        ) {\n                            const service = obj.message.service as 'dwdService' | 'uwzService' | 'zamgService';\n                            for (const b in messagesDef.genericWarntyp) {\n                                const a = Number(b) as keyof messagesDef.genericWarntypeType;\n                                if (\n                                    messagesDef.genericWarntyp[a][service] !== undefined &&\n                                    messagesDef.genericWarntyp[a][service].length > 0\n                                ) {\n                                    reply.push({\n                                        label: this.library.getTranslation(messagesDef.genericWarntyp[a].name),\n                                        value: a,\n                                    });\n                                }\n                            }\n                        } else if (\n                            obj.message &&\n                            obj.message.service &&\n                            NotificationType.Array.indexOf(obj.message.service) != -1\n                        ) {\n                            for (const b in messagesDef.genericWarntyp) {\n                                const a = Number(b) as keyof messagesDef.genericWarntypeType;\n                                reply.push({\n                                    label: this.library.getTranslation(messagesDef.genericWarntyp[a].name),\n                                    value: a,\n                                });\n                            }\n                        }\n                        //this.log.debug(obj.command + ': ' + JSON.stringify(reply));\n                        this.sendTo(obj.from, obj.command, reply, obj.callback);\n                    }\n                    break;\n                case 'test':\n                    this.log.debug(`Retrieve test message!`);\n                    this.sendTo(obj.from, 'test', 'Test Message', obj.callback);\n                    break;\n                /**testing online */\n                case 'test-connection':\n                    if (obj.from !== 'system.adapter.test.0') {\n                        this.sendTo(obj.from, obj.command, 'Dont use this command!', obj.callback);\n                        return;\n                    }\n                    this.log.debug(`Retrieve test-connection message!`);\n                    connected = false;\n                    [\n                        'provider.dwd.info.connection',\n                        'provider.uwz.info.connection',\n                        'provider.zamg.info.connection',\n                        'info.connection',\n                    ].forEach(a => {\n                        state = this.library.readdp(a);\n                        if (state) {\n                            connected = connected || !!state.val;\n                        }\n                    });\n                    // connected === true is right\n                    this.sendTo(obj.from, obj.command, connected ? 'true' : 'false', obj.callback);\n                    break;\n                /** testing with testdata and switch then to online */\n                case 'test-data':\n                    if (obj.from !== 'system.adapter.test.0') {\n                        this.sendTo(obj.from, obj.command, 'Dont use this command!', obj.callback);\n                        return;\n                    }\n                    connected = false;\n                    [\n                        'provider.dwd.info.connection',\n                        'provider.uwz.info.connection',\n                        'provider.zamg.info.connection',\n                        'info.connection',\n                    ].forEach(a => {\n                        state = this.library.readdp(a);\n                        if (state) {\n                            connected = connected || !!state.val;\n                        }\n                    });\n                    state = this.library.readdp('provider.activeWarnings');\n                    if (state) {\n                        connected = !!connected || !(state.val && Number(state.val) >= 4);\n                    } else {\n                        connected = true;\n                    } //error\n                    // connected === false is right\n                    this.sendTo(\n                        obj.from,\n                        obj.command,\n                        !connected\n                            ? 'ok'\n                            : `connect: ${connected} (false) activeWarnings ${state ? state.val : 'undefined'} (>=4)`,\n                        obj.callback,\n                    );\n                    this.config.useTestWarnings = false;\n                    break;\n                default:\n                    this.sendTo(obj.from, obj.command, 'unknown message', obj.callback);\n                    this.log.debug(\n                        `Retrieve unknown command ${obj.command} messsage: ${JSON.stringify(obj.message)} from ${\n                            obj.from\n                        }`,\n                    );\n            }\n        }\n    }\n}\nif (require.main !== module) {\n    // Export the constructor in compact mode\n\n    module.exports = (options: WeatherWarnings | undefined) =>\n        //@ts-expect-error no idea why options need log\n        new WeatherWarnings(options);\n} else {\n    // otherwise start the instance directly\n    (() => new WeatherWarnings())();\n}\nexport = WeatherWarnings;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,wBAAuB;AACvB,sBAAO;AACP,sBAAmC;AACnC,qBAAwB;AACxB,kBAA6B;AAC7B,kBAA6B;AAC7B,uBAAkC;AAClC,qCAA4C;AAC5C,wBAAsC;AAItC,MAAM,wBAAwB,MAAM,QAAQ;AAAA,EACxC,aAA2C;AAAA,EAC3C;AAAA,EACA,qBAAgD;AAAA,EAChD,mBAA2B;AAAA,EAC3B,kBAAuB;AAAA,EAChB,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,gBAAgB,KAAK,eAAe,KAAK,IAAI,CAAC;AACtD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAC1C,SAAK,UAAU,IAAI,uBAAQ,IAAI;AAC/B,SAAK,qBAAqB,IAAI,mCAAmB,IAAI;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AACnC,QAAI,CAAC,KAAK,oBAAoB;AAC1B,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AACA,SAAK,wBAAwB,eAAe;AAG5C,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,WAAW,GAAG;AACzC,WAAK,OAAO,cAAc,CAAC;AAAA,IAC/B;AACA,QAAI,IAAI;AACR,QAAI,SAAS;AACb,QAAI,oBAAoB,CAAC;AACzB,WAAO,MAAM,GAAG;AACZ,YAAM,cAAc,KAAK,OAAO;AAEhC,iBAAW,KAAK,YAAY,uBAAuB;AAC/C,YAAI,MAAM;AACV,mBAAW,KAAK,aAAa;AACzB,cAAI,EAAE,mBAAmB,EAAE,QAAQ,WAAW,EAAE,EAAE,YAAY,GAAG;AAC7D,kBAAM,OAAO,CAAC;AACd;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,OAAO,IAAI;AACX,mBAAS;AACT,eAAK,OAAO,YAAY,KAAK;AAAA,YACzB,iBAAiB,EAAE,QAAQ,WAAW,EAAE,EAAE,YAAY;AAAA,YACtD,WAAW;AAAA,YACX,WAAW;AAAA,YACX,YAAY;AAAA,YACZ,UAAU;AAAA,UACd,CAAC;AAAA,QACL;AAEA,0BAAkB,CAAC,IAAI,KAAK,OAAO,YAAY,OAAO,KAAK,KAAK,OAAO,YAAY,SAAS,IAAI,GAAG;AAAA,MACvG;AACA,UAAI,YAAY,sBAAsB,UAAU,KAAK,OAAO,YAAY,QAAQ;AAC5E,aAAK,OAAO,cAAc,CAAC;AAC3B,4BAAoB,CAAC;AACrB,iBAAS;AACT;AAAA,MACJ;AACA;AAAA,IACJ;AACA,QAAI,QAAQ;AACR,YAAMA,OAAM,MAAM,KAAK,sBAAsB,kBAAkB,KAAK,IAAI,IAAI,KAAK,QAAQ,EAAE;AAC3F,UAAIA,QAAOA,KAAI,QAAQ;AACnB,QAAAA,KAAI,OAAO,cAAc,KAAK,OAAO;AACrC,cAAM,KAAK,sBAAsB,kBAAkB,KAAK,IAAI,IAAI,KAAK,QAAQ,IAAIA,IAAG;AACpF,aAAK,IAAI,KAAK,8CAA8C;AAAA,MAChE;AAAA,IACJ;AAEA,QAAI;AAEA,YAAM,KAAK,QAAQ,KAAK;AACxB,WAAK,mBAAmB,eAAe,iBAAiB;AACxD,YAAM,KAAK,QAAQ,WAAW,MAAM,KAAK,eAAe,GAAG,CAAC;AAAA,IAChE,SAAS,OAAO;AACZ,WAAK,IAAI,MAAM,8CAA8C,KAAe,EAAE;AAAA,IAClF;AACA,aAAS;AACT,UAAM,MAAM,MAAM,KAAK,sBAAsB,kBAAkB,KAAK,IAAI,IAAI,KAAK,QAAQ,EAAE;AAE3F,QAAI,KAAK;AACL;AACI,YAAI,QAAQ;AACZ,cAAM,OAAO,OAAO,KAAK,YAAY,wBAAwB;AAC7D,aAAK,KAAK;AACV,mBAAW,KAAK,MAAM;AAClB,mBAAS,MAAM,CAAC,MAAM,KAAK,QAAQ;AAAA,YAC/B,wCAAsB,WAAW,aAC7B,CACJ,EAAE,OAAO;AAAA,UACb,CAAC;AAAA;AAAA,QACL;AACA,gBAAQ,MAAM,MAAM,GAAG,EAAE;AACzB,YAAI,IAAI,OAAO,gBAAgB,IAAI,OAAO,aAAa,QAAQ,KAAK,MAAM,QAAQ,GAAG;AACjF,cAAI,OAAO,eAAe;AAC1B,mBAAS;AACT,eAAK,IAAI,KAAK,4CAA4C;AAAA,QAC9D;AAAA,MACJ;AACA;AACI,YAAI,QAAQ;AACZ,gBAAQ,OAAO,KAAK,YAAY,cAAc,EAEzC,IAAI,OAAK,YAAY,eAAe,CAAC,EAAE,EAAE,EACzC,KAAK,IAAI;AACd,YAAI,KAAK,OAAO,qBAAqB,OAAO;AACxC,cAAI,OAAO,oBAAoB;AAC/B,eAAK,IAAI,KAAK,iDAAiD;AAC/D,mBAAS;AAAA,QACb;AAAA,MACJ;AACA;AACI,YAAI,KAAK,OAAO,YAAY;AACxB,cAAI,SAAS;AACb,qBAAW,KAAK,KAAK,OAAO,YAAY;AACpC,gBAAI,EAAE,UAAU,QAAW;AACvB,uBAAS;AAAA,YACb;AAAA,UACJ;AACA,cAAI,QAAQ;AACR,iBAAK,IAAI,MAAM,eAAe;AAC9B,qBAAS;AACT,gBAAI,OAAO,aAAa,CAAC;AACzB,iBAAK,IAAI,KAAK,0CAA0C;AAAA,UAC5D;AAAA,QACJ;AAAA,MACJ;AACA;AACI,YAAI,SAAS,IAAI,OAAO,iBAAiB,CAAC;AAC1C,YAAI,CAAC,UAAU,CAAC,MAAM,QAAQ,MAAM,GAAG;AACnC,mBAAS,CAAC;AAAA,QACd;AACA,mBAAW,KAAK,YAAY,gBAAgB;AACxC,gBAAMC,SAAQ,OAAO;AAAA,YACjB,CAAC,MACG,EAAE,kBAAkB,OAAO,CAAC;AAAA,UACpC;AACA,cAAIA,UAAS,IAAI;AACb,kBAAM,IAAI,KAAK,QAAQ;AAAA,cACnB,YAAY,eAAe,OAAO,CAAC,CAA0C,EAAE;AAAA,YACnF;AACA,gBAAI,KAAK,OAAOA,MAAK,EAAE,UAAU;AAC7B,qBAAOA,MAAK,EAAE,WAAW;AAAA,YAC7B;AAAA,UACJ,OAAO;AACH,mBAAO,KAAK;AAAA,cACR,gBAAgB,OAAO,CAAC;AAAA,cACxB,UAAU,KAAK,QAAQ;AAAA,gBACnB,YAAY,eAAe,OAAO,CAAC,CAA0C,EAAE;AAAA,cACnF;AAAA,cACA,OAAO;AAAA,YACX,CAAC;AAAA,UACL;AAAA,QACJ;AAEA,cAAM,QAAQ,OAAO;AAAA,UACjB,CAAC,MAAmE,EAAE,kBAAkB,OAAO,CAAC;AAAA,QACpG;AACA,YAAI,SAAS,IAAI;AACb,iBAAO,KAAK;AAAA,YACR,gBAAgB,OAAO,CAAC;AAAA,YACxB,UAAU,KAAK,QAAQ,eAAe,2BAA2B;AAAA,YACjE,OAAO;AAAA,UACX,CAAC;AAAA,QACL,OAAO;AACH,gBAAM,IAAI,KAAK,QAAQ,eAAe,2BAA2B;AACjE,cAAI,KAAK,OAAO,KAAK,EAAE,UAAU;AAC7B,mBAAO,KAAK,EAAE,WAAW;AAAA,UAC7B;AAAA,QACJ;AACA,YAAI,KAAK,UAAU,IAAI,OAAO,aAAa,KAAK,KAAK,UAAU,MAAM,GAAG;AACpE,mBAAS;AACT,eAAK,IAAI,KAAK,6CAA6C;AAC3D,cAAI,OAAO,gBAAgB;AAAA,QAC/B;AAAA,MACJ;AAGA,UACI,OACA,IAAI,UACJ,IAAI,OAAO,cAAc,CAAC,KAC1B,IAAI,OAAO,cAAc,CAAC,EAAE,YAAY,uBAC1C;AACE,aAAK,IAAI,KAAK,0CAA0C;AACxD,cAAM,gBAAqB,KAAK,QAAQ,mBAAmB,IAAI,OAAO,aAAa;AACnF,mBAAW,KAAK,IAAI,OAAO,eAAe;AACtC,wBAAc,CAA2C,EAAE,WAAW,KAAK,QAAQ;AAAA,YAC/E,IAAI,OAAO,cAAc,CAAC,EAAE;AAAA,UAChC;AACA,eAAK,IAAI;AAAA,YACL,oCAAoC,KAAK,QAAQ;AAAA,cAC7C,IAAI,OAAO,cAAc,CAAC,EAAE;AAAA,YAChC,CAAC;AAAA,UACL;AAAA,QACJ;AACA,aAAK,OAAO,gBAAgB;AAC5B,aAAK,IAAI,KAAK,yCAAyC,KAAK,SAAS,GAAG;AAExE,YAAI,SAAS,EAAE,GAAG,IAAI,QAAQ,cAA6B;AAC3D,aAAK,IAAI,KAAK,6CAA6C;AAC3D,iBAAS;AAAA,MACb;AACA,UAAI,QAAQ;AACR,cAAM,KAAK,sBAAsB,kBAAkB,KAAK,IAAI,IAAI,KAAK,QAAQ,IAAI,GAAG;AACpF,aAAK,IAAI,KAAK,4BAA4B;AAAA,MAC9C;AAAA,IACJ;AAEA,SAAK,OAAO,mBACR,OAAO,KAAK,OAAO,oBAAoB,YAAY,KAAK,OAAO,mBAAmB,IAC5E,KAAK,OAAO,mBACZ;AAEV,SAAK,aAAa,KAAK;AAAA,MACnB,eAAgB,MAAW;AACvB,cAAM,OAAO;AACb,YAAI,CAAC,MAAM;AACP;AAAA,QACJ;AACA,YAAI,CAAC,KAAK,oBAAoB;AAC1B;AAAA,QACJ;AACA,YAAI,KAAK,mBAAmB,QAAQ;AAChC;AAAA,QACJ;AAEA,cAAM,KAAK,mBAAmB,KAAK;AACnC,aAAK,IAAI,KAAK,qBAAqB,KAAK,mBAAmB,cAAc,GAAK,UAAU;AAExF,cAAM,yBAAuD,CAAC;AAC9D,mBAAW,KAAK,iBAAiB,OAAO;AACpC,gBAAM,sBAAsB;AAC5B,cAAI,KAAK,OAAO,GAAG,mBAAmB,UAA0C,GAAG;AAC/E,kBAAM,UAA0C,CAAC;AACjD,gBAAI,KAAK,OAAO,GAAG,mBAAmB,aAA6C,GAAG;AAClF,sBAAQ,KAAK,YAAY;AAAA,YAC7B;AACA,gBAAI,KAAK,OAAO,GAAG,mBAAmB,aAA6C,GAAG;AAClF,sBAAQ,KAAK,YAAY;AAAA,YAC7B;AACA,gBAAI,KAAK,OAAO,GAAG,mBAAmB,cAA8C,GAAG;AACnF,sBAAQ,KAAK,aAAa;AAAA,YAC9B;AACA,kBAAM,WAAyC;AAAA,cAC3C,KACI,KAAK,OAAO,GAAG,mBAAmB,aAA6C,MAC/E,SACO,KAAK,OACF,GAAG,mBAAmB,aAC1B,IACA;AAAA,cACV,QAAQ,KAAK,OACT,GAAG,mBAAmB,gBAC1B;AAAA,cACA,WAAW,KAAK,OACZ,GAAG,mBAAmB,mBAC1B;AAAA,cACA,KACI,KAAK,OAAO,GAAG,mBAAmB,aAA6C,MAC/E,SACO,KAAK,OACF,GAAG,mBAAmB,aAC1B,IACA,KAAK,OACC,GAAG,mBAAmB,aAC1B,MAAM,SACL,KAAK,OACF,GAAG,mBAAmB,aAC1B,IACA;AAAA,cACZ,WACI,KAAK,OAAO,GAAG,mBAAmB,YAA4C,MAC9E,SACO,KAAK,OACF,GAAG,mBAAmB,YAC1B,IACA;AAAA,cACV,iBACI,KAAK,OACD,GAAG,mBAAmB,kBAC1B,MAAM,SACC,KAAK,OACF,GAAG,mBAAmB,kBAC1B,IACA;AAAA,cACV,OACI,KAAK,OAAO,GAAG,mBAAmB,QAAwC,MAC1E,SACO,KAAK,OACF,GAAG,mBAAmB,QAC1B,IACA;AAAA,YACd;AACA,uBAAW,KAAK,UAAU;AACtB,oBAAM,IAAI;AACV,kBAAI,SAAS,CAAC,KAAK,QAAW;AAC1B;AAAA,cACJ;AACA,uBAAS,CAAC,IAAI,SAAS,CAAC,IAAI,SAAS,CAAC,IAAI;AAAA,YAC9C;AAGA,mCAAuB,mBAAmB,IAAI;AAAA,cAC1C,GAAG,2DAA4B,mBAAmB;AAAA,cAClD;AAAA,cACA,QAAQ;AAAA,gBACJ,MAAM;AAAA,kBACF,OACK,KAAK,OACF,GAAG,mBAAmB,cAC1B,KAAgB;AAAA,kBACpB,OACK,KAAK,OACF,GAAG,mBAAmB,aAC1B,KAAkB,CAAC,GACrB,IAAI,OAAK,OAAO,CAAC,CAAC;AAAA,gBACxB;AAAA,gBACA,QAAQ;AAAA,kBACJ,OAAQ,KAAK,OACT,GAAG,mBAAmB,oBAC1B,IACO,KAAK,OACF,GAAG,mBAAmB,oBAC1B,IACA;AAAA,kBACN,OAAQ,KAAK,OACT,GAAG,mBAAmB,mBAC1B,IACO,KAAK,OACF,GAAG,mBAAmB,mBAC1B,IACA,CAAC,GACL,IAAI,OAAK,OAAO,CAAC,CAAC;AAAA,gBACxB;AAAA,cACJ;AAAA,cACA,SAAS,KAAK,OACV,GAAG,mBAAmB,UAC1B;AAAA,cACA,MAAM;AAAA,cACN,SAAS;AAAA,cACT,YAAY;AAAA,YAChB;AACA,mBAAO;AAAA;AAAA,cAEH,uBAAuB,mBAAmB;AAAA,cAC1C,2DAA4B,mBAAmB;AAAA,YACnD;AAAA,UACJ;AAAA,QACJ;AAEA,YAAI,KAAK,OAAO,oBAAoB,uBAAuB,YAAY,QAAW;AAC9E,iCAAuB,SAAS,cAAc,KAAK,OAAO,wBAAwB;AAClF,iCAAuB,SAAS,SAAS,KAAK,OAAO,mBAAmB;AACxE,iCAAuB,SAAS,SAAS,KAAK,OAAO,mBAAmB;AACxE,iCAAuB,SAAS,aAAa,KAAK,OAAO,uBAAuB;AAAA,QACpF;AACA,YAAI,KAAK,OAAO,oBAAoB,uBAAuB,YAAY,QAAW;AAC9E,cAAI,KAAK,OAAO,sBAAsB;AAClC,mCAAuB,SAAS,cAAc,KAAK,OAAO;AAAA,UAC9D;AAAA,QACJ;AACA,YAAI,KAAK,OAAO,oBAAoB,uBAAuB,YAAY,QAAW;AAC9E,iCAAuB,SAAS,QAAQ,KAAK,OAAO,kBAAkB;AACtE,iCAAuB,SAAS,WAAW,KAAK,OAAO,qBAAqB;AAC5E,iCAAuB,SAAS,SAAS,KAAK,OAAO,mBAAmB;AAAA,QAC5E;AACA,YAAI,KAAK,OAAO,kBAAkB,uBAAuB,UAAU,QAAW;AAC1E,iCAAuB,OAAO,WAC1B,KAAK,OAAO,oBAAoB,SAAY,SAAS,KAAK,OAAO,eAAe,IAAI;AACxF,iCAAuB,OAAO,cAAc,KAAK,OAAO,sBAAsB;AAAA,QAClF;AACA,YAAI,KAAK,OAAO,gBAAgB,uBAAuB,QAAQ,QAAW;AAAA,QAE1E;AACA,YAAI,KAAK,OAAO,mBAAmB,uBAAuB,WAAW,QAAW;AAAA,QAEhF;AACA,YAAI,KAAK,OAAO,iBAAiB,uBAAuB,SAAS,QAAW;AACxE,iCAAuB,MAAM,QAAQ,SAAS,KAAK,OAAO;AAC1D,iCAAuB,MAAM,QAAQ,SAAS,KAAK,OAAO;AAC1D,iCAAuB,MAAM,aAAa,KAAK,OAAO;AAAA,QAC1D;AACA,YAAI,KAAK,OAAO,kBAAkB,uBAAuB,UAAU,QAAW;AAC1E,iCAAuB,OAAO,UAC1B,KAAK,OAAO,iBAAiB,IAAI,OAAO,KAAK,OAAO,cAAc,IAAI;AAC1E,iCAAuB,OAAO,QAAQ,KAAK,OAAO,gBAAgB;AAClE,iCAAuB,OAAO,SAAS,KAAK,OAAO,iBAAiB,CAAC;AACrE,iCAAuB,OAAO,iBAAiB,KAAK,OAAO,yBAAyB;AACpF,cAAI,KAAK,OAAO,kBAAkB,UAAU,KAAK,CAAC,KAAK,OAAO,kBAAkB,CAAC,GAAG;AAChF,iBAAK,IAAI,MAAM,yCAAyC;AACxD,mBAAO,uBAAuB;AAC9B,iBAAK,OAAO,iBAAiB;AAAA,UACjC,WAAW,KAAK,OAAO,kBAAkB,QAAQ;AAC7C,iBAAK,IAAI,MAAM,yCAAyC;AACxD,mBAAO,uBAAuB;AAC9B,iBAAK,OAAO,iBAAiB;AAAA,UACjC;AAAA,QACJ;AACA,YAAI,KAAK,OAAO,iBAAiB,uBAAuB,SAAS,QAAW;AACxE,iCAAuB,MAAM,UACzB,KAAK,OAAO,gBAAgB,IAAI,OAAO,KAAK,OAAO,aAAa,IAAI;AACxE,cACI,KAAK,OAAO,oBAAoB,UAAU,KAC1C,KAAK,OAAO,oBAAoB,CAAC,EAAE,iBAAiB,QACtD;AACE,iBAAK,IAAI,KAAK,yCAAyC;AACvD,mBAAO,uBAAuB;AAC9B,iBAAK,OAAO,gBAAgB;AAAA,UAChC,OAAO;AACH,mCAAuB,MAAM,WAAW,KAAK,OAAO,oBAAoB;AAAA,cACpE,OAAK,EAAE;AAAA,YACX;AAAA,UACJ;AAAA,QACJ;AACA,YAAI;AACA,gBAAM,KAAK,mBAAmB,0BAA0B,sBAAsB;AAAA,QAClF,QAAQ;AACJ,eAAK,IAAI,MAAM,8DAA8D;AAC7E;AAAA,QACJ;AAEA,mBAAW,MAAM,KAAK,OAAO,kBAAkB;AAC3C,cAAI,KAAK,OAAO,YAAY;AACxB,gBAAI,MAAM,GAAG,WAAW,KAAK,OAAO,GAAG,WAAW,IAAI,KAAO;AACzD,mBAAK,IAAI,KAAK,QAAQ,GAAG,WAAW,4BAA4B;AAChE;AAAA,YACJ;AACA,kBAAM,UAEF;AAAA,cACA,QAAQ;AAAA,gBACJ,MAAM,KAAK,OAAO;AAAA,gBAClB,OAAO,KAAK,OAAO;AAAA,gBACnB,OAAO,KAAK,OAAO;AAAA,cACvB;AAAA,YACJ;AACA,iBAAK,IAAI,KAAK,OAAO,GAAG,WAAW,4BAA4B;AAC/D,iBAAK,mBAAmB,yBAAyB;AAAA,cAC7C,GAAG;AAAA,cACH,SAAS;AAAA,cACT,YAAY,GAAG;AAAA,cACf,YAAY,OAAO,GAAG,WAAW;AAAA,cACjC,oBAAoB,KAAK;AAAA,cACzB,UAAU,KAAK,OAAO;AAAA,YAC1B,CAAC;AAAA,UACL;AAAA,QACJ;AAEA,mBAAW,MAAM,KAAK,OAAO,mBAAmB;AAC5C,cAAI,KAAK,OAAO,eAAe,MAAM,OAAO,GAAG,gBAAgB,YAAY,GAAG,cAAc;AACxF,iBAAK,IAAI,KAAK,gCAAgC;AAC9C,kBAAM,UAEF;AAAA,cACA,QAAQ;AAAA,gBACJ,MAAM,KAAK,OAAO;AAAA,gBAClB,OAAO,KAAK,OAAO;AAAA,gBACnB,OAAO,KAAK,OAAO;AAAA,cACvB;AAAA,YACJ;AACA,kBAAM,UAAU,GAAG,aAAa,MAAM,GAAG;AACzC,gBAAI,QAAQ,UAAU,GAAG;AACrB,mBAAK,mBAAmB,yBAAyB;AAAA,gBAC7C,GAAG;AAAA,gBACH,SAAS;AAAA,gBACT,YAAY;AAAA,gBACZ,UAAU,KAAK,OAAO;AAAA,gBACtB,oBAAoB,KAAK;AAAA,gBACzB,YAAY,GAAG;AAAA,cACnB,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,QACJ;AACA,cAAM,YAAiB,KAAK,MAAM,KAAK,UAAU,KAAK,OAAO,gBAAgB,CAAC;AAC9E,mBAAW,MAAM,KAAK,OAAO,kBAAkB;AAC3C,cAAI,KAAK,OAAO,YAAY;AACxB,gBACK,MAAM,OAAO,GAAG,eAAe,YAAY,GAAG,YAAY,MAAM,GAAG,EAAE,UAAU,KAC/E,GAAG,gBAAgB,OAAO,GAAG,iBAAiB,UACjD;AACE,kBAAI,CAAC,GAAG,cAAc;AAClB,sBAAM,eAAe,MAAM,YAAY,YAAY;AAAA,kBAC/C,GAAG,YAAY,MAAM,GAAG;AAAA,kBACxB;AAAA,kBACA;AAAA,gBACJ;AACA,oBAAI,KAAK,mBAAmB,QAAQ;AAChC;AAAA,gBACJ;AAEA,oBAAI,cAAc;AACd,qBAAG,eAAe;AAAA,gBACtB;AAAA,cACJ;AACA,oBAAM,UAAmD;AAAA,gBACrD,QAAQ;AAAA,kBACJ,MAAM,KAAK,OAAO;AAAA,kBAClB,OAAO,KAAK,OAAO;AAAA,kBACnB,OAAO,KAAK,OAAO;AAAA,gBACvB;AAAA,cACJ;AACA,kBAAI,CAAC,GAAG,gBAAgB,OAAO,GAAG,iBAAiB,UAAU;AACzD,qBAAK,IAAI,KAAK,gCAAgC,GAAG,WAAW,GAAG;AAC/D;AAAA,cACJ;AACA,mBAAK,IAAI,KAAK,+BAA+B;AAC7C,mBAAK,mBAAmB,yBAAyB;AAAA,gBAC7C,GAAG;AAAA,gBACH,SAAS;AAAA,gBACT,YAAY,GAAG;AAAA,gBACf,oBAAoB,KAAK;AAAA,gBACzB,UAAU,KAAK,OAAO;AAAA,gBACtB,YAAY,GAAG;AAAA,cACnB,CAAC;AAAA,YACL,OAAO;AACH,mBAAK,IAAI;AAAA,gBACL,4CAA4C,GAAG,WAAW,iBAAiB,GAAG,YAAY;AAAA,cAC9F;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,KAAK,UAAU,SAAS,KAAK,KAAK,UAAU,KAAK,OAAO,gBAAgB,GAAG;AAC3E,gBAAMD,OAAM,MAAM,KAAK,sBAAsB,kBAAkB,KAAK,IAAI,IAAI,KAAK,QAAQ,EAAE;AAC3F,cAAIA,MAAK;AACL,iBAAK,IAAI,MAAM,gCAAgC;AAC/C,YAAAA,KAAI,OAAO,mBAAmB;AAC9B,kBAAM,KAAK,sBAAsB,kBAAkB,KAAK,IAAI,IAAI,KAAK,QAAQ,IAAIA,IAAG;AAAA,UACxF;AAAA,QACJ;AAEA,cAAM,aAAa,CAAC;AACpB,cAAM,cAAc,CAAC;AACrB,cAAM,gBAAgB,CAAC;AACvB,mBAAW,KAAK,KAAK,mBAAmB,WAAW;AAC/C,qBAAW,KAAK,EAAE,IAAI;AACtB,wBAAc,KAAK,GAAG,EAAE,IAAI,eAAe;AAC3C,wBAAc,KAAK,GAAG,EAAE,IAAI,WAAW;AACvC,mBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,kBAAkB,KAAK;AACnD,wBAAY,KAAK,GAAG,EAAE,IAAI,iBAAiB,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE;AAC/D,wBAAY,KAAK,GAAG,EAAE,IAAI,aAAa,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE;AAAA,UAC/D;AAAA,QACJ;AACA,mBAAW,KAAK,WAAW;AAC3B,mBAAW,KAAK,SAAS;AACzB,mBAAW,KAAK,iBAAiB;AACjC,mBAAW,KAAK,8BAA8B;AAC9C,mBAAW,KAAK,kBAAkB;AAClC,mBAAW,KAAK,yBAAyB;AACzC,cAAM,KAAK,QAAQ,YAAY,YAAY,MAAM,CAAC;AAClD,cAAM,KAAK,QAAQ,YAAY,aAAa,eAAe,CAAC;AAE5D,cAAM,KAAK,mBAAmB,WAAW;AAEzC,aAAK,mBAAmB,cAAc,EAAE,MAAM,MAAM;AAAA,QAAC,CAAC;AACtD,cAAM,KAAK,mBAAmB,mBAAmB;AAAA,MACrD;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,UAAI,KAAK,YAAY;AACjB,aAAK,aAAa,KAAK,UAAU;AAAA,MACrC;AACA,UAAI,KAAK,oBAAoB;AACzB,cAAM,KAAK,mBAAmB,OAAO;AAAA,MACzC;AACA,eAAS;AAAA,IACb,QAAQ;AACJ,eAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAc,eAAe,IAAY,KAAwD;AAC7F,QAAI,KAAK;AAEL,UAAI,MAAM,iBAAiB;AACvB,YAAI,MAAM,KAAK,QAAQ,YAAY,IAAI,OAAO,QAAQ,GAAG;AACrD,cAAI,KAAK,oBAAoB;AACzB,kBAAM,KAAK,mBAAmB,gBAAgB;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAc,cAAc,IAAY,OAAyD;AAC7F,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,QAAI,MAAM,KAAK;AACX;AAAA,IACJ;AACA,SAAK,QAAQ,MAAM,GAAG,QAAQ,GAAG,KAAK,SAAS,KAAK,EAAE,GAAG,SAAS,MAAM,KAAK,QAAW,MAAM,KAAK,MAAM,EAAE;AAE3G,QAAI,MAAM,KAAK,mBAAoB,YAAY,EAAE,GAAG;AAChD;AAAA,IACJ;AACA,QAAI,MAAM,KAAK,mBAAoB,aAAa,EAAE,GAAG;AACjD;AAAA,IACJ;AACA,QAAI,MAAM,KAAK,mBAAoB,gBAAgB,EAAE,GAAG;AACpD;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,UAAU,KAAsC;AAC1D,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AACxC,cAAQ,IAAI,YAAY,IAAI,OAAO,SAAS,IAAI,IAAI,aAAa,KAAK,UAAU,GAAG,CAAC,EAAE;AACtF,UAAI,YAAY;AAChB,UAAI;AACJ,cAAQ,OAAO,IAAI,OAAO,GAAG;AAAA,QACzB,KAAK;AACD;AACI,iBAAK;AAAA,cACD,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ;AAAA,gBACI;AAAA,kBACI,OAAO,KAAK,QAAQ,eAAe,QAAQ;AAAA,kBAC3C,OAAO;AAAA,gBACX;AAAA,gBACA;AAAA,kBACI,OAAO,KAAK,QAAQ,eAAe,SAAS;AAAA,kBAC5C,OAAO;AAAA,gBACX;AAAA,gBACA;AAAA,kBACI,OAAO,KAAK,QAAQ,eAAe,WAAW;AAAA,kBAC9C,OAAO;AAAA,gBACX;AAAA,gBACA;AAAA,kBACI,OAAO,KAAK,QAAQ,eAAe,UAAU;AAAA,kBAC7C,OAAO;AAAA,gBACX;AAAA,gBACA;AAAA,kBACI,OAAO,KAAK,QAAQ,eAAe,QAAQ;AAAA,kBAC3C,OAAO;AAAA,gBACX;AAAA,gBACA;AAAA,kBACI,OAAO,KAAK,QAAQ,eAAe,UAAU;AAAA,kBAC7C,OAAO;AAAA,gBACX;AAAA,gBACA;AAAA,kBACI,OAAO,KAAK,QAAQ,eAAe,QAAQ;AAAA,kBAC3C,OAAO;AAAA,gBACX;AAAA,cACJ;AAAA,cACA,IAAI;AAAA,YACR;AAAA,UACJ;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAeJ,KAAK;AACD;AACI,kBAAM,OAAc,CAAC;AACrB,gBAAI,IAAI,QAAQ,WAAW,QAAQ;AAO/B,oBAAM,OAAO,MAAM,KAAK,uBAAuB,GAAG,IAAI,QAAQ,OAAO,iBAAiB;AACtF,yBAAW,KAAK,MAAM;AAClB,oBAAI,EAAE,SAAS,iBAAiB,GAAG;AAC/B,wBAAM,UAAU,MAAM,KAAK;AAAA,oBACvB,EAAE,MAAM,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG;AAAA,kBACrC;AACA,sBAAI,SAAS;AACT,yBAAK,KAAK;AAAA,sBACN,OAAO,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,sBACrB,OAAO,QAAQ,OAAO;AAAA,oBAC1B,CAAC;AAAA,kBACL;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AACA,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,MAAM,IAAI,QAAQ;AAAA,UACzD;AACA;AAAA;AAAA,QAGJ,KAAK;AAAA,QACL,KAAK;AACD;AACI,gBAAI,OAAY,CAAC;AACjB,gBAAI,IAAI,QAAQ,WAAW,YAAY;AACnC,qBAAO;AAAA,gBACH,QAAQ;AAAA,kBACJ,eAAe,KAAK,QAAQ,mBAAmB,kBAAAE,QAAW,OAAO,aAAa;AAAA,gBAClF;AAAA,cACJ;AACA,kBAAI,IAAI,WAAW,cAAc;AAC7B,sBAAMF,OAAM,MAAM,KAAK;AAAA,kBACnB,kBAAkB,KAAK,IAAI,IAAI,KAAK,QAAQ;AAAA,gBAChD;AACA,oBAAIA,QAAOA,KAAI,UAAUA,KAAI,OAAO,eAAe;AAC/C,wBAAM,SAASA,KAAI,OAAO;AAC1B,6BAAW,KAAK,KAAK,OAAO,eAAe;AACvC,0BAAM,QAAQ,OAAO,UAAU,CAAC,MAAW,EAAE,eAAe,EAAE,WAAW;AACzE,wBAAI,SAAS,IAAI;AACb,6BAAO,KAAK,CAAC;AAAA,oBACjB;AAAA,kBACJ;AACA,uBAAK,OAAO,gBAAgB;AAAA,gBAChC;AAAA,cACJ;AACA,yBAAW,KAAK,KAAK,OAAO,eAAe;AACvC,sBAAM,MAAM,KAAK,OAAO,cAAc,CAAC,EAAE;AACzC,qBAAK,OAAO,cAAc,CAAC,EAAE,WAAW,KAAK,QAAQ,eAAe,GAAG;AAAA,cAC3E;AAAA,YACJ,OAAO;AACH,qBAAO,EAAE,QAAQ,CAAC,EAAE;AACpB;AAAA,gBACI,GAAG,IAAI,QAAQ,OAAO;AAAA,gBACtB,GAAG,IAAI,QAAQ,OAAO;AAAA,gBACtB,GAAG,IAAI,QAAQ,OAAO;AAAA,gBACtB,GAAG,IAAI,QAAQ,OAAO;AAAA,cAC1B,EAAE,QAAQ,OAAK;AACX,qBAAK,OAAO,CAAC,IAAI,kBAAAE,QAAW,OAAO,CAAmC;AAAA,cAC1E,CAAC;AAAA,YACL;AACA,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,MAAM,IAAI,QAAQ;AAAA,UACzD;AACA;AAAA,QACJ,KAAK;AACD;AACI,gBAAI,IAAI,QAAQ,SAAS;AACrB,oBAAM,YAAY,KAAK,OAAO;AAC9B,oBAAM,QAAQ;AAAA,gBACV;AAAA,kBACI,OAAO;AAAA,kBACP,OAAO;AAAA,gBACX;AAAA,cACJ;AACA,yBAAW,KAAK,WAAW;AACvB,oBAAI,EAAE,gBAAgB,MAAM,CAAC,EAAE,YAAY,WAAW,GAAG,GAAG;AACxD,wBAAM,KAAK;AAAA,oBACP,OAAO,GAAG,EAAE,WAAW;AAAA,oBACvB,OAAO,GAAG,EAAE,WAAW;AAAA,kBAC3B,CAAC;AAAA,gBACL;AAAA,cACJ;AAEA,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,OAAO,IAAI,QAAQ;AAAA,YAC1D,OAAO;AACH,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,QAAQ;AACnD,mBAAK,IAAI;AAAA,gBACL,mCAAmC,IAAI,OAAO;AAAA,cAClD;AAAA,YACJ;AAAA,UACJ;AAEA;AAAA,QACJ,KAAK;AACD;AACI,gBAAI,IAAI,WAAW,IAAI,QAAQ,SAAS;AACpC,oBAAM,OAAmC,CAAC;AAC1C,kBAAI;AACA,sBAAM,OAAO,MAAM,KAAK,mBAAmB,UAAU,YAAY;AAAA,kBAC7D,UAAU,kBAAkB,IAAI,QAAQ,OAAO;AAAA,kBAC/C,QAAQ,kBAAkB,IAAI,QAAQ,OAAO;AAAA,gBACjD,CAAC;AAED,oBAAI,QAAQ,KAAK,MAAM;AACnB,6BAAW,OAAO,KAAK,MAAM;AACzB,0BAAM,WAAW,OAAO,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC;AAC5C,wBAAI,aAAa,QAAW;AACxB,2BAAK,QAAQ,IAAI;AAAA,oBACrB;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,SAAS,OAAO;AACZ,qBAAK,IAAI,MAAM,cAAc,KAAe,EAAE;AAAA,cAClD;AAEA,oBAAM,QAAQ,CAAC,EAAE,OAAO,QAAQ,OAAO,OAAO,CAAC;AAE/C,yBAAW,KAAK,MAAM;AAClB,sBAAM,KAAK;AAAA,kBACP,OAAO,GAAG,IAAI,QAAQ,OAAO,IAAI,CAAC;AAAA,kBAClC,OAAO,GAAG,IAAI,QAAQ,OAAO,IAAI,CAAC;AAAA,gBACtC,CAAC;AAAA,cACL;AAEA,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,OAAO,IAAI,QAAQ;AAAA,YAC1D;AAAA,UACJ;AACA;AAAA,QACJ,KAAK;AACD,cAAI,IAAI,UAAU;AACd,kBAAM,QAAQ,CAAC;AACf,kBAAM,OAAO,YAAY,WAAW;AACpC,uBAAW,KAAK,MAAM;AAClB,sBAAQ,GAAG;AAAA,gBACP,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,KAAK,KAAK;AACN,wBAAM,KAAK;AAAA,oBACP,OAAO,KAAK,QAAQ;AAAA,sBAChB,YAAY,WAAW,YAAY,CAAiC;AAAA,oBACxE;AAAA,oBACA,OAAO,OAAO,CAAC;AAAA,kBACnB,CAAC;AACD;AAAA,gBACJ;AAAA,cACJ;AACA,kBAAI,OAAO,CAAC,KAAK,GAAG;AAChB;AAAA,cACJ;AAAA,YACJ;AAEA,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,OAAO,IAAI,QAAQ;AAAA,UAC1D;AACA;AAAA,QACJ,KAAK;AACD,cAAI,IAAI,UAAU;AACd,kBAAM,QAAQ,CAAC;AACf,gBACI,IAAI,WACJ,IAAI,QAAQ,WACZ,YAAY,sBAAsB,QAAQ,IAAI,QAAQ,OAAO,KAAK,IACpE;AACE,oBAAM,UAAU,IAAI,QAAQ;AAC5B,yBAAW,KAAK,YAAY,gBAAgB;AACxC,sBAAM,IAAI,OAAO,CAAC;AAClB,oBACI,YAAY,eAAe,CAAC,EAAE,OAAO,MAAM,UAC3C,YAAY,eAAe,CAAC,EAAE,OAAO,EAAE,SAAS,GAClD;AACE,wBAAM,KAAK;AAAA,oBACP,OAAO,KAAK,QAAQ,eAAe,YAAY,eAAe,CAAC,EAAE,IAAI;AAAA,oBACrE,OAAO;AAAA,kBACX,CAAC;AAAA,gBACL;AAAA,cACJ;AAAA,YACJ,WACI,IAAI,WACJ,IAAI,QAAQ,WACZ,iBAAiB,MAAM,QAAQ,IAAI,QAAQ,OAAO,KAAK,IACzD;AACE,yBAAW,KAAK,YAAY,gBAAgB;AACxC,sBAAM,IAAI,OAAO,CAAC;AAClB,sBAAM,KAAK;AAAA,kBACP,OAAO,KAAK,QAAQ,eAAe,YAAY,eAAe,CAAC,EAAE,IAAI;AAAA,kBACrE,OAAO;AAAA,gBACX,CAAC;AAAA,cACL;AAAA,YACJ;AAEA,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,OAAO,IAAI,QAAQ;AAAA,UAC1D;AACA;AAAA,QACJ,KAAK;AACD,eAAK,IAAI,MAAM,wBAAwB;AACvC,eAAK,OAAO,IAAI,MAAM,QAAQ,gBAAgB,IAAI,QAAQ;AAC1D;AAAA;AAAA,QAEJ,KAAK;AACD,cAAI,IAAI,SAAS,yBAAyB;AACtC,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,0BAA0B,IAAI,QAAQ;AACzE;AAAA,UACJ;AACA,eAAK,IAAI,MAAM,mCAAmC;AAClD,sBAAY;AACZ;AAAA,YACI;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACJ,EAAE,QAAQ,OAAK;AACX,oBAAQ,KAAK,QAAQ,OAAO,CAAC;AAC7B,gBAAI,OAAO;AACP,0BAAY,aAAa,CAAC,CAAC,MAAM;AAAA,YACrC;AAAA,UACJ,CAAC;AAED,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,YAAY,SAAS,SAAS,IAAI,QAAQ;AAC7E;AAAA;AAAA,QAEJ,KAAK;AACD,cAAI,IAAI,SAAS,yBAAyB;AACtC,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,0BAA0B,IAAI,QAAQ;AACzE;AAAA,UACJ;AACA,sBAAY;AACZ;AAAA,YACI;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACJ,EAAE,QAAQ,OAAK;AACX,oBAAQ,KAAK,QAAQ,OAAO,CAAC;AAC7B,gBAAI,OAAO;AACP,0BAAY,aAAa,CAAC,CAAC,MAAM;AAAA,YACrC;AAAA,UACJ,CAAC;AACD,kBAAQ,KAAK,QAAQ,OAAO,yBAAyB;AACrD,cAAI,OAAO;AACP,wBAAY,CAAC,CAAC,aAAa,EAAE,MAAM,OAAO,OAAO,MAAM,GAAG,KAAK;AAAA,UACnE,OAAO;AACH,wBAAY;AAAA,UAChB;AAEA,eAAK;AAAA,YACD,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,CAAC,YACK,OACA,YAAY,SAAS,2BAA2B,QAAQ,MAAM,MAAM,WAAW;AAAA,YACrF,IAAI;AAAA,UACR;AACA,eAAK,OAAO,kBAAkB;AAC9B;AAAA,QACJ;AACI,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,mBAAmB,IAAI,QAAQ;AAClE,eAAK,IAAI;AAAA,YACL,4BAA4B,IAAI,OAAO,cAAc,KAAK,UAAU,IAAI,OAAO,CAAC,SAC5E,IAAI,IACR;AAAA,UACJ;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,IAAI,QAAQ,SAAS,QAAQ;AAGzB,SAAO,UAAU,CAAC;AAAA;AAAA,IAEd,IAAI,gBAAgB,OAAO;AAAA;AACnC,OAAO;AAEH,GAAC,MAAM,IAAI,gBAAgB,GAAG;AAClC;AACA,iBAAS;",
  "names": ["obj", "index", "io_package"]
}
