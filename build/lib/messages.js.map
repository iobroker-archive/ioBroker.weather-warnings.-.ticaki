{
  "version": 3,
  "sources": ["../../src/lib/messages.ts"],
  "sourcesContent": ["import type WeatherWarnings from '../main';\nimport { statesObjectsWarnings } from './def/definition';\nimport * as MessageType from './def/messages-def';\nimport type * as NotificationType from './def/notificationService-def';\nimport type { messageFilterType } from './def/provider-def';\nimport * as library from './library';\nimport type * as Provider from './def/provider-def';\nimport type { NotificationClass } from './notification';\nimport { defaultData } from './test-warnings';\n\ntype ChangeTypeOfKeys<Obj, newKey> = Obj extends object\n    ? { [K in keyof Obj]: ChangeTypeOfKeys<Obj[K], newKey> }\n    : newKey;\n\nexport type customformatedKJDef = ChangeTypeOfKeys<MessageType.customFormatedKeysDef, customFormatedKDefSub>;\nexport type customFormatedKInit =\n    | ChangeTypeOfKeys<MessageType.customFormatedKeysDef, string | number | undefined>\n    | undefined;\nexport type customFormatedKR = ChangeTypeOfKeys<MessageType.customFormatedKeysDef, string | number | undefined>;\n\ntype customFormatedKDefSub = { cmd?: messageCmdType; node: string };\ntype messageCmdType =\n    | 'dayoftheweek'\n    | 'translate'\n    | 'dayoftheweekshort'\n    | 'countdown'\n    | 'geticon'\n    | 'countdownhours'\n    | 'countdownminutes'\n    | 'countdownfuture'\n    | 'daytime'\n    | 'adverb'\n    | 'dwdcolor'\n    | 'warningcount'\n    | 'iconbase64'\n    | 'getEmoji'\n    | 'fullday';\n/**\n * MessageClass\n */\nexport class MessagesClass extends library.BaseClass {\n    provider: Provider.ProviderClassType | null;\n    providerController: Provider.ProviderController;\n    library: library.Library;\n    private formatedKeysJsonataDefinition: customformatedKJDef = {};\n    formatedData: customFormatedKInit;\n    rawWarning: any;\n    /** message is a new message */\n    newMessage: boolean = true;\n    /** message got a update lately */\n    updated: boolean = false;\n    /**Indicate if message is marked for remove. */\n    notDeleted: boolean = true;\n    templates: ioBroker.AdapterConfig['templateTable'];\n    messages: { message: string; key: string }[] = [];\n    starttime = 1;\n    endtime = 1;\n    ceiling = 0;\n    altitude = 0;\n    level = 0;\n    type = 0;\n    cache: { messages: { [key: string]: NotificationType.MessageType }; ts: number } = {\n        messages: {},\n        ts: 0,\n    };\n    genericType: keyof MessageType.genericWarntypeType = 0;\n    /** jsonata/typscript cmd to gather data from warning json */\n    formatedKeyCommand: { [key: string]: Required<customformatedKJDef> } = {\n        dwdService: {\n            starttime: {\n                node: `$fromMillis($toMillis(ONSET),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdate: {\n                node: `$fromMillis($toMillis(ONSET),\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endtime: {\n                node: `$fromMillis($toMillis(EXPIRES),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            enddate: {\n                node: `$fromMillis($toMillis(EXPIRES),\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdayofweek: {\n                node: `ONSET`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `EXPIRES`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `HEADLINE` },\n            description: { node: `DESCRIPTION` },\n            impact: { node: `` },\n            ceiling: { node: `$floor(CEILING * 0.3048)` },\n            altitude: { node: `$floor(ALTITUDE * 0.3048)` },\n            warnlevelcolorhex: {\n                node: `EC_AREA_COLOR`,\n                cmd: `dwdcolor`,\n            },\n            warnlevelcolorname: {\n                node: `($temp := $lookup(${JSON.stringify(\n                    MessageType.dwdLevel,\n                )},$lowercase(SEVERITY));$lookup(${JSON.stringify(MessageType.color.textdwd)},$string($temp)))`,\n                cmd: 'translate',\n            },\n            warnlevelname: {\n                node: `($temp := $lookup(${JSON.stringify(\n                    MessageType.dwdLevel,\n                )},$lowercase(SEVERITY));$lookup(${JSON.stringify(\n                    MessageType.textLevels.textGeneric,\n                )},$string($temp)))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `$lookup(${JSON.stringify(MessageType.dwdLevel)},$lowercase(SEVERITY))`,\n            },\n\n            warntypename: {\n                node: `$lookup(${JSON.stringify(MessageType.warnTypeName.dwdService)}, $string(EC_II))`,\n                cmd: 'translate',\n            },\n            location: { node: `AREADESC` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            instruction: {\n                cmd: undefined,\n                node: 'INSTRUCTION',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                node: `ONSET`,\n                cmd: 'dayoftheweekshort',\n            },\n            enddayofweekshort: {\n                node: `EXPIRES`,\n                cmd: 'dayoftheweekshort',\n            },\n            countdown: {\n                cmd: 'countdown',\n                node: '$toMillis(ONSET)',\n            },\n            status: {\n                cmd: undefined,\n                node: '',\n            },\n            starttimems: {\n                cmd: undefined,\n                node: '',\n            },\n            endtimems: {\n                cmd: undefined,\n                node: '',\n            },\n            iconurl: {\n                cmd: 'geticon',\n                node: '',\n            },\n            startday: {\n                cmd: undefined,\n                node: `$fromMillis($toMillis(ONSET),\"[D01]\",\"\\${this.timeOffset}\")`,\n            },\n            startmonth: {\n                cmd: undefined,\n                node: `$fromMillis($toMillis(ONSET),\"[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endday: {\n                cmd: undefined,\n                node: `$fromMillis($toMillis(EXPIRES),\"[D01]\",\"\\${this.timeOffset}\")`,\n            },\n            endmonth: {\n                cmd: undefined,\n                node: `$fromMillis($toMillis(EXPIRES),\"[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            warntypegeneric: {\n                cmd: undefined,\n                node: '',\n            },\n            cdminute: {\n                cmd: 'countdownminutes',\n                node: '$toMillis(ONSET)',\n            },\n            cdhour: {\n                cmd: 'countdownhours',\n                node: '$toMillis(ONSET)',\n            },\n            cdfuture: {\n                cmd: 'countdownfuture',\n                node: '$toMillis(ONSET)',\n            },\n            startdaytime: {\n                cmd: 'daytime',\n                node: 'ONSET',\n            },\n            enddaytime: {\n                cmd: 'daytime',\n                node: 'EXPIRES',\n            },\n            startadverb: {\n                cmd: 'adverb',\n                node: 'ONSET',\n            },\n            warningcount: {\n                cmd: 'warningcount',\n                node: '',\n            },\n            htmlicon: {\n                cmd: 'iconbase64',\n                node: '',\n            },\n            weatheremoji: {\n                cmd: 'getEmoji',\n                node: '',\n            },\n            zamgdayPeriod: {\n                cmd: 'fullday',\n                node: '',\n            },\n        },\n\n        uwzService: {\n            starttime: {\n                node: `$fromMillis(dtgStart * 1000,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdate: {\n                node: `$fromMillis(dtgStart * 1000,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endtime: {\n                node: `$fromMillis(dtgEnd * 1000,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            enddate: {\n                node: `$fromMillis(dtgEnd * 1000,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdayofweek: {\n                node: `dtgStart * 1000`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `dtgEnd * 1000`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `payload.translationsShortText` },\n            description: { node: `payload.translationsLongText` },\n            impact: { node: `` },\n            ceiling: { node: `payload.altMax` },\n            altitude: { node: `payload.altMin` },\n            warnlevelcolorname: {\n                node: `($i := $split(payload.levelName, '_'); $l := $i[0] = \"notice\" ? 0 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    MessageType.level.uwz,\n                )}, $i[2]); $lookup(${JSON.stringify(MessageType.color.textuwz)},$string($l)))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 0 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    MessageType.level.uwz,\n                )}, $i[2]))`,\n            },\n            warnlevelcolorhex: {\n                node: `$lookup(${JSON.stringify(\n                    MessageType.color.uwzColor,\n                )},$string(($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 0 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    MessageType.level.uwz,\n                )}, $i[2]))))`,\n            },\n            warnlevelname: {\n                node: `($i := $split(payload.levelName, '_'); $l := $i[0] = \"notice\" ? 0 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    MessageType.level.uwz,\n                )}, $i[2]); $lookup(${JSON.stringify(MessageType.textLevels.textGeneric)},$string($l)))`,\n                cmd: 'translate',\n            },\n            warntypename: {\n                node: `$lookup(${JSON.stringify(MessageType.warnTypeName.uwzService)}, $string(type))`,\n                cmd: 'translate',\n            },\n            location: { node: `areaID` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            instruction: {\n                cmd: undefined,\n                node: '',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                node: `dtgStart * 1000`,\n                cmd: 'dayoftheweekshort',\n            },\n            enddayofweekshort: {\n                node: `dtgEnd * 1000`,\n                cmd: 'dayoftheweekshort',\n            },\n            countdown: {\n                cmd: 'countdown',\n                node: 'dtgStart * 1000',\n            },\n            status: {\n                cmd: undefined,\n                node: '',\n            },\n            starttimems: {\n                cmd: undefined,\n                node: '',\n            },\n            endtimems: {\n                cmd: undefined,\n                node: '',\n            },\n            iconurl: {\n                cmd: 'geticon',\n                node: '',\n            },\n            startday: {\n                cmd: undefined,\n                node: `$fromMillis(dtgStart * 1000,\"[D01]\",\"\\${this.timeOffset}\")`,\n            },\n            startmonth: {\n                cmd: undefined,\n                node: `$fromMillis(dtgStart * 1000,\"[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endday: {\n                cmd: undefined,\n                node: `$fromMillis(dtgEnd * 1000,\"[D01]\",\"\\${this.timeOffset}\")`,\n            },\n            endmonth: {\n                cmd: undefined,\n                node: `$fromMillis(dtgEnd * 1000,\"[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            warntypegeneric: {\n                cmd: undefined,\n                node: '',\n            },\n            cdminute: {\n                cmd: 'countdownminutes',\n                node: 'dtgStart * 1000',\n            },\n            cdhour: {\n                cmd: 'countdownhours',\n                node: 'dtgStart * 1000',\n            },\n            cdfuture: {\n                cmd: 'countdownfuture',\n                node: 'dtgStart * 1000',\n            },\n            startdaytime: {\n                cmd: 'daytime',\n                node: 'dtgStart * 1000',\n            },\n            enddaytime: {\n                cmd: 'daytime',\n                node: 'dtgEnd * 1000',\n            },\n            startadverb: {\n                cmd: 'adverb',\n                node: 'dtgStart * 1000',\n            },\n            warningcount: {\n                cmd: 'warningcount',\n                node: '',\n            },\n            htmlicon: {\n                cmd: 'iconbase64',\n                node: '',\n            },\n            weatheremoji: {\n                cmd: 'getEmoji',\n                node: '',\n            },\n            zamgdayPeriod: {\n                cmd: 'fullday',\n                node: '',\n            },\n        },\n        zamgService: {\n            starttime: {\n                node: `$fromMillis($number(rawinfo.start)*1000,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdate: {\n                node: `$fromMillis($number(rawinfo.start)*1000,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endtime: {\n                node: `$fromMillis($number(rawinfo.end)*1000,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            enddate: {\n                node: `$fromMillis($number(rawinfo.end)*1000,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdayofweek: {\n                node: `$number(rawinfo.start)*1000`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `$number(rawinfo.end)*1000`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `text` },\n            description: { node: `meteotext` },\n            impact: { node: `auswirkungen` },\n            ceiling: { node: `` },\n            altitude: { node: `` },\n            warnlevelcolorname: {\n                node: `$lookup(${JSON.stringify(MessageType.color.textzamg)},$string(rawinfo.wlevel))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `$string(rawinfo.wlevel)`,\n            },\n            warnlevelcolorhex: {\n                node: `$lookup(${JSON.stringify(MessageType.color.zamgColor)},$string(rawinfo.wlevel))`,\n            },\n            warnlevelname: {\n                node: `$lookup(${JSON.stringify(MessageType.textLevels.textGeneric)},$string(rawinfo.wlevel))`,\n                cmd: 'translate',\n            },\n            warntypename: {\n                node: `$lookup(${JSON.stringify(MessageType.warnTypeName.zamgService)},$string(rawinfo.wtype))`,\n                cmd: 'translate',\n            },\n\n            location: { node: `location` },\n            instruction: { node: `empfehlungen` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                node: `$number(rawinfo.start)*1000`,\n                cmd: 'dayoftheweekshort',\n            },\n            enddayofweekshort: {\n                node: `$number(rawinfo.end)*1000`,\n                cmd: 'dayoftheweekshort',\n            },\n            countdown: {\n                cmd: 'countdown',\n                node: '$number(rawinfo.start)*1000',\n            },\n            status: {\n                cmd: undefined,\n                node: '',\n            },\n            starttimems: {\n                cmd: undefined,\n                node: '',\n            },\n            endtimems: {\n                cmd: undefined,\n                node: '',\n            },\n            iconurl: {\n                cmd: 'geticon',\n                node: '',\n            },\n            startday: {\n                cmd: undefined,\n                node: `$fromMillis($number(rawinfo.start)*1000,\"[D01]\",\"\\${this.timeOffset}\")`,\n            },\n            startmonth: {\n                cmd: undefined,\n                node: `$fromMillis($number(rawinfo.start)*1000,\"[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endday: {\n                cmd: undefined,\n                node: `$fromMillis($number(rawinfo.end)*1000,\"[D01]\",\"\\${this.timeOffset}\")`,\n            },\n            endmonth: {\n                cmd: undefined,\n                node: `$fromMillis($number(rawinfo.end)*1000,\"[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            warntypegeneric: {\n                cmd: undefined,\n                node: '',\n            },\n            cdminute: {\n                cmd: 'countdownminutes',\n                node: '$number(rawinfo.start)*1000',\n            },\n            cdhour: {\n                cmd: 'countdownhours',\n                node: '$number(rawinfo.start)*1000',\n            },\n            cdfuture: {\n                cmd: 'countdownfuture',\n                node: '$number(rawinfo.start)*1000',\n            },\n            startdaytime: {\n                cmd: 'daytime',\n                node: '$number(rawinfo.start)*1000',\n            },\n            enddaytime: {\n                cmd: 'daytime',\n                node: '$number(rawinfo.end)*1000',\n            },\n            startadverb: {\n                cmd: 'adverb',\n                node: '$number(rawinfo.start)*1000',\n            },\n            warningcount: {\n                cmd: 'warningcount',\n                node: '',\n            },\n            htmlicon: {\n                cmd: 'iconbase64',\n                node: '',\n            },\n            weatheremoji: {\n                cmd: 'getEmoji',\n                node: '',\n            },\n            zamgdayPeriod: {\n                cmd: 'fullday',\n                node: '',\n            },\n        },\n        default: {\n            starttime: { node: `` },\n            startdate: { node: `` },\n            endtime: { node: `` },\n            enddate: { node: `` },\n            startdayofweek: { node: `` },\n            enddayofweek: { node: `` },\n            headline: { node: `` },\n            description: { node: `` },\n            impact: { node: `` },\n            ceiling: { node: `` },\n            altitude: { node: `` },\n            warnlevelname: { node: `` },\n            warnlevelnumber: { node: `` },\n            warnlevelcolorhex: { node: `` },\n            warnlevelcolorname: { node: `` },\n            warntypename: { node: `` },\n            location: { node: `` },\n            instruction: { node: `` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                cmd: undefined,\n                node: '',\n            },\n            enddayofweekshort: {\n                cmd: undefined,\n                node: '',\n            },\n            countdown: {\n                cmd: undefined,\n                node: '',\n            },\n            status: {\n                cmd: undefined,\n                node: '',\n            },\n            starttimems: {\n                cmd: undefined,\n                node: '',\n            },\n            endtimems: {\n                cmd: undefined,\n                node: '',\n            },\n            iconurl: {\n                cmd: 'geticon',\n                node: '',\n            },\n            startday: {\n                cmd: undefined,\n                node: '',\n            },\n            startmonth: {\n                cmd: undefined,\n                node: '',\n            },\n            endday: {\n                cmd: undefined,\n                node: '',\n            },\n            endmonth: {\n                cmd: undefined,\n                node: '',\n            },\n            warntypegeneric: {\n                cmd: undefined,\n                node: '',\n            },\n            cdminute: {\n                cmd: undefined,\n                node: '',\n            },\n            cdhour: {\n                cmd: undefined,\n                node: '',\n            },\n            cdfuture: {\n                cmd: undefined,\n                node: '',\n            },\n            startdaytime: {\n                cmd: undefined,\n                node: '',\n            },\n            enddaytime: {\n                cmd: undefined,\n                node: '',\n            },\n            startadverb: {\n                cmd: undefined,\n                node: '',\n            },\n            warningcount: {\n                cmd: undefined,\n                node: '',\n            },\n            htmlicon: {\n                cmd: undefined,\n                node: '',\n            },\n            weatheremoji: {\n                cmd: 'getEmoji',\n                node: '',\n            },\n            zamgdayPeriod: {\n                cmd: undefined,\n                node: '',\n            },\n        },\n    };\n    providerParent: Provider.ProviderClassType | null = null;\n    /**\n     * Creates a new MessagesClass object.\n     *\n     * @param adapter the adapter instance\n     * @param name the name of the object\n     * @param [provider] the provider object\n     * @param [data] the raw data of the warning\n     * @param pcontroller the provider controller\n     * @param [providerParent] the provider parent\n     */\n    constructor(\n        adapter: WeatherWarnings,\n        name: string,\n        provider: Provider.ProviderClassType | null,\n        data: object,\n        pcontroller: Provider.ProviderController,\n        providerParent: Provider.ProviderClassType | null = null,\n    ) {\n        super(adapter, name);\n\n        if (!data && provider) {\n            throw new Error(`${this.log.getName()} data is null`);\n        }\n        this.provider = provider;\n        this.library = this.adapter.library;\n        this.rawWarning = data;\n        this.templates = this.adapter.config.templateTable;\n        this.providerController = pcontroller;\n        this.providerParent = providerParent ? providerParent : null;\n        switch (provider ? provider.service : 'default') {\n            case `dwdService`:\n            case `uwzService`:\n            case `zamgService`:\n                if (provider && provider.service) {\n                    const json = this.formatedKeyCommand[provider.service];\n                    for (const k in json) {\n                        const key = k as keyof MessageType.customFormatedKeysDef;\n                        const data = json[key];\n                        this.addFormatedDefinition(key, data);\n                    }\n                }\n                break;\n            default: {\n                const json = this.formatedKeyCommand.default;\n                for (const k in json) {\n                    const key = k as keyof MessageType.customFormatedKeysDef;\n                    const data = json[key];\n                    this.addFormatedDefinition(key, data);\n                }\n                switch (this.providerParent ? this.providerParent.service : '') {\n                    case `dwdService`:\n                        {\n                            this.rawWarning = defaultData.dwdService;\n                            this.rawWarning.HEADLINE = this.library.getTranslation('NoWarning');\n                        }\n                        break;\n                    case `uwzService`:\n                        {\n                            this.rawWarning = defaultData.uwzService;\n                            this.rawWarning.payload.translationsShortText.DE = this.library.getTranslation('NoWarning');\n                        }\n                        break;\n                    case `zamgService`:\n                        {\n                            this.rawWarning = defaultData.zamgService;\n                            this.rawWarning.text = this.library.getTranslation('NoWarning');\n                        }\n                        break;\n                    default:\n                }\n                if (this.providerParent) {\n                    const json = this.formatedKeyCommand[this.providerParent.service];\n                    for (const k in json) {\n                        const key = k as keyof MessageType.customFormatedKeysDef;\n                        const data = json[key];\n                        this.addFormatedDefinition(key, data);\n                    }\n                }\n                break;\n            }\n        }\n    }\n    /**\n     * Update the formated Data.\n     *\n     * @returns the updated data\n     */\n    async updateFormated(): Promise<customFormatedKR> {\n        switch (this.provider ? this.provider.service : this.providerParent ? this.providerParent.service : 'default') {\n            case 'dwdService':\n                {\n                    this.starttime = Number(await this.library.readWithJsonata(this.rawWarning, `$toMillis(ONSET)`));\n                    this.endtime = Number(await this.library.readWithJsonata(this.rawWarning, `$toMillis(EXPIRES)`));\n                    this.ceiling = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$floor(CEILING * 0.3048)`),\n                    ); // max h\u00F6he\n                    this.altitude = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$floor(ALTITUDE * 0.3048)`),\n                    ); // min h\u00F6he\n                    this.level = Number(\n                        await this.library.readWithJsonata(\n                            this.rawWarning,\n                            `$number($lookup(${JSON.stringify(MessageType.dwdLevel)},$lowercase(SEVERITY)))`,\n                        ),\n                    );\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `$number(EC_II)`));\n                }\n                break;\n\n            case 'uwzService':\n                {\n                    this.starttime = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$number(dtgStart * 1000)`),\n                    );\n                    this.endtime = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$number(dtgEnd * 1000)`),\n                    );\n                    this.ceiling = Number(await this.library.readWithJsonata(this.rawWarning, `payload.altMax`)); // max h\u00F6he\n                    this.altitude = Number(await this.library.readWithJsonata(this.rawWarning, `payload.altMin`)); // min h\u00F6he\n                    this.level = Number(\n                        await this.library.readWithJsonata(\n                            this.rawWarning,\n                            `($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                                MessageType.level.uwz,\n                            )}, $i[2]))`,\n                        ),\n                    );\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `$number(type)`));\n                }\n                break;\n            case 'zamgService':\n                {\n                    this.starttime =\n                        Number(await this.library.readWithJsonata(this.rawWarning, `$number(rawinfo.start)`)) * 1000;\n                    this.endtime =\n                        Number(await this.library.readWithJsonata(this.rawWarning, `$number(rawinfo.end)`)) * 1000;\n                    this.ceiling = -1;\n                    this.altitude = -1;\n                    this.level = Number(await this.library.readWithJsonata(this.rawWarning, `rawinfo.wlevel`));\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `rawinfo.wtype`));\n                }\n                break;\n            default: {\n                this.starttime = 1;\n                this.endtime = 1;\n                this.ceiling = -1;\n                this.altitude = -1;\n                this.level = -1;\n                this.type = -1;\n                this.newMessage = false;\n                this.notDeleted = true;\n            }\n        }\n        if (this.name == 'noMessage') {\n            this.newMessage = false;\n        }\n        const sortedWarntypes: Required<MessageType.genericWarntypeNumberType>[] = [\n            10, 7, 2, 4, 3, 8, 9, 5, 6, 11, 12, 1,\n        ];\n        if (this.provider) {\n            for (const wt of sortedWarntypes) {\n                const o = MessageType.genericWarntyp[wt];\n                const s = this.provider.service;\n                if (Array.isArray(o[s]) && o[s].indexOf(this.type) != -1) {\n                    this.genericType = wt;\n                    break;\n                }\n            }\n        }\n\n        return await this.updateFormatedData();\n    }\n\n    /**\n     * filters the message against a messageFilterType\n     *\n     * @param filter messageFilterType\n     * @returns true if the message is not filtered, false otherwise\n     */\n    filter(filter: messageFilterType): boolean {\n        if (filter.level && filter.level > this.level) {\n            return false;\n        }\n        if (this.provider && MessageType.filterWarntype(this.provider.service, filter.type, this.type)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @description\n     * Returns a message object based on the templateKey and caches the result for 1 minute.\n     * If the templateKey is not found in the templateTable, it will log an error.\n     * If the this.formatedData is not set, it will return an empty message.\n     * @param templateKey The key of the template to use from the templateTable.\n     * @param pushService The notification service object.\n     * @returns A message object with the message text, start time and end time.\n     */\n    async getMessage(templateKey: string, pushService: NotificationClass): Promise<NotificationType.MessageType> {\n        let msg = '';\n        const templates = this.adapter.config.templateTable;\n        const tempid = templates.findIndex(a => a.templateKey == templateKey);\n\n        if (this.cache.ts < Date.now() - 60000) {\n            await this.updateFormated();\n        }\n        if (this.cache.messages[templateKey] !== undefined) {\n            return this.cache.messages[templateKey];\n        }\n\n        if (this.formatedData) {\n            msg = this.getTemplates(tempid);\n            if (tempid == -1) {\n                this.log.error(`${pushService.name}`, `No template for key: ${templateKey}!`);\n            } else {\n                this.cache.messages[templates[tempid].templateKey as keyof typeof this.cache.messages] =\n                    this.returnMessage(msg, this.starttime, templateKey);\n            }\n        }\n        return this.returnMessage(msg, this.starttime, templateKey);\n    }\n\n    private getTemplates(tempid: number): string {\n        let msg = '';\n        const templates = this.adapter.config.templateTable;\n        if (!this.formatedData) {\n            return msg;\n        }\n        // catch endless cylce\n        let count = 0;\n        while (count++ < 100) {\n            if (tempid == -1) {\n                break;\n            }\n            let rerun = false;\n            const template = (msg === '' ? templates[tempid].template : msg).replaceAll('iconbase64', 'htmlicon');\n            if (!template) {\n                break;\n            }\n            const temp = template.split(/(?<!\\\\)\\${/g);\n            msg = temp[0];\n            for (let b = 1; temp.length > b; b++) {\n                const t = temp[b].split(/(?<!\\\\)}/g);\n                const key = t[0] as keyof MessageType.customFormatedKeysDef;\n                const configTemplate = this.adapter.config.templateTable.filter(a => a.templateKey == key);\n                /** [a,b,c]templatekey */\n                if (key[0] == '[') {\n                    const arraykey = key.split(']');\n                    arraykey[0] = arraykey[0].slice(1);\n                    if (\n                        arraykey[1] &&\n                        this.formatedData[arraykey[1] as keyof MessageType.customFormatedKeysDef] !== undefined\n                    ) {\n                        const n = this.formatedData[arraykey[1] as keyof MessageType.customFormatedKeysDef];\n\n                        if (n != '' && !Number.isNaN(n)) {\n                            try {\n                                msg += arraykey[0]\n                                    .split(',')\n                                    [\n                                        this.formatedData[\n                                            arraykey[1] as keyof MessageType.customFormatedKeysDef\n                                        ] as number\n                                    ].trim();\n                            } catch {\n                                this.log.error(`Array is not an array ${arraykey[0]} or index out of range ${n}.`);\n                            }\n                        }\n                    } else {\n                        this.log.error(\n                            `Unknown or not a number key ${arraykey[1]} in template ${templates[tempid].templateKey}!`,\n                        );\n                    }\n                    /** (2<templatekey)true#false */\n                } else if (key[0] == '(') {\n                    const arraykey = key.split(')');\n                    arraykey[0] = arraykey[0].slice(1);\n                    for (const a of ['<', '>', '=', '!=']) {\n                        if (arraykey[0].indexOf(a) == -1) {\n                            continue;\n                        }\n                        const funcarray = arraykey[0].split(a);\n                        const n = this.formatedData[funcarray[1].trim() as keyof MessageType.customFormatedKeysDef];\n                        if (n !== undefined) {\n                            let result = false;\n                            switch (a) {\n                                case '>':\n                                    {\n                                        result = funcarray[0].trim() > n;\n                                    }\n                                    break;\n                                case '<':\n                                    {\n                                        result = funcarray[0].trim() < n;\n                                    }\n                                    break;\n                                case '=':\n                                    {\n                                        result = funcarray[0].trim() == n;\n                                    }\n                                    break;\n                                case '!=':\n                                    {\n                                        result = funcarray[0].trim() != n;\n                                    }\n                                    break;\n                            }\n                            let temp = '';\n                            if (arraykey[1].indexOf('#') != -1) {\n                                if (result) {\n                                    temp = arraykey[1].split('#')[0];\n                                } else {\n                                    temp = arraykey[1].split('#')[1] !== undefined ? arraykey[1].split('#')[1] : '';\n                                }\n                            } else if (result) {\n                                temp = arraykey[1];\n                            }\n                            if (temp.indexOf('\\\\${') != -1) {\n                                temp = temp.replace(/\\\\\\${/g, '${');\n                                temp = temp.replace(/\\\\+}/g, '}');\n                                rerun = true;\n                            }\n                            msg += temp;\n                        } else {\n                            this.log.error(`Unknown key ${funcarray[1]} in template ${templates[tempid].templateKey}!`);\n                            break;\n                        }\n                    }\n                } else if (configTemplate.length == 1) {\n                    msg += configTemplate[0].template;\n                    rerun = true;\n                } else if (key && this.formatedData[key] !== undefined) {\n                    msg += this.formatedData[key];\n                } else if (\n                    key &&\n                    this.formatedData[key.toLowerCase() as keyof MessageType.customFormatedKeysDef] !== undefined\n                ) {\n                    let m = this.formatedData[key.toLowerCase() as keyof MessageType.customFormatedKeysDef];\n                    if (typeof m == 'string' && m.length > 0) {\n                        m =\n                            m[0].toUpperCase() +\n                            (key[key.length - 1] == key[key.length - 1].toUpperCase()\n                                ? m.slice(1).toUpperCase()\n                                : m.slice(1));\n                    }\n                    msg += m;\n                } else {\n                    msg += key;\n                }\n                if (t.length > 1) {\n                    msg += t[1];\n                }\n            }\n\n            if (!rerun) {\n                break;\n            }\n        }\n        return msg;\n    }\n    private returnMessage = (msg: string, time: number, template: string): NotificationType.MessageType => {\n        return { startts: time, text: msg.replace(/\\\\+}/g, '}').replace(/\\\\+n/g, '\\n'), template: template };\n    };\n\n    /**\n     * Update the formated Data.\n     *\n     * @returns the updated data\n     */\n    async updateFormatedData(): Promise<customFormatedKR> {\n        if (!this.rawWarning) {\n            throw new Error(`${this.log.getName()} error(165) rawWarning null or undefined!`);\n        }\n\n        {\n            const timeOffset =\n                (Math.floor(new Date().getTimezoneOffset() / 60) < 0 || new Date().getTimezoneOffset() % 60 < 0\n                    ? '+'\n                    : '-') +\n                `00${Math.abs(Math.floor(new Date().getTimezoneOffset() / 60))}`.slice(-2) +\n                `00${Math.abs(new Date().getTimezoneOffset() % 60)}`.slice(-2);\n            const status = this.newMessage\n                ? MessageType.status.new\n                : this.notDeleted && this.name != 'noMessage'\n                  ? MessageType.status.hold\n                  : MessageType.status.clear;\n            const temp: any = {};\n            for (const key in this.formatedKeysJsonataDefinition) {\n                const obj = this.formatedKeysJsonataDefinition[key as keyof MessageType.customFormatedKeysDef];\n                if (obj !== undefined) {\n                    // reset the offset because of daylight saving time\n                    const cmd =\n                        obj.node !== undefined && obj.node != ''\n                            ? obj.node.replace(`\\${this.timeOffset}`, timeOffset)\n                            : '';\n\n                    let result =\n                        cmd != ''\n                            ? ((await this.library.readWithJsonata(\n                                  this.rawWarning,\n                                  cmd,\n                              )) as keyof MessageType.customFormatedKeysDef)\n                            : '';\n                    if (obj.cmd !== undefined) {\n                        result = this.readWithTypescript(result, obj.cmd) as keyof MessageType.customFormatedKeysDef;\n                    }\n                    // Handling for uwzService translations in jsons with different Names - but onl 1 Key here.\n                    if (typeof result == 'object') {\n                        for (const a in result as object) {\n                            if (temp[key]) {\n                                temp[key] += ', ';\n                            } else {\n                                temp[key] = '';\n                            }\n                            temp[key] += result[a] as string;\n                        }\n                    } else {\n                        temp[key] = result;\n                    }\n                }\n            }\n\n            this.formatedData = {\n                ...temp,\n                status: this.library.getTranslation(status),\n            } as MessageType.customFormatedKeysDef;\n            this.formatedData.warntypegenericname = this.library.getTranslation(\n                MessageType.genericWarntyp[this.genericType].name,\n            );\n            this.formatedData.warntypegeneric = this.genericType;\n            this.formatedData.locationcustom = this.provider\n                ? this.provider.customName\n                : this.providerController.providers\n                      .map(a => a.customName)\n                      .filter((item, pos, arr) => arr.indexOf(item) == pos)\n                      .join(', ');\n            this.formatedData.provider = this.provider\n                ? this.provider.service.replace('Service', '').toUpperCase()\n                : this.providerParent\n                  ? this.providerParent.service.replace('Service', '').toUpperCase()\n                  : 'unknown';\n            this.updated = false;\n        }\n        if (!this.formatedData) {\n            throw new Error(`${this.log.getName()} formatedDate is empty!`);\n        }\n        this.formatedData.starttimems = this.starttime;\n        this.formatedData.endtimems = this.endtime;\n        this.cache.ts = Date.now();\n        this.cache.messages = {};\n        for (let a = 0; a < this.adapter.config.templateTable.length; a++) {\n            const t = this.adapter.config.templateTable[a];\n            if (t.templateKey.startsWith('_')) {\n                this.formatedData[t.templateKey as keyof typeof this.formatedData] = this.getTemplates(a);\n            }\n        }\n\n        return this.formatedData;\n    }\n\n    /**\n     * Execute a command on the data of the raw warning.\n     *\n     * @param data the data to execute the command on\n     * @param cmd the command to execute\n     * @returns the result of the command\n     */\n    readWithTypescript(data: any, cmd: messageCmdType): string | number {\n        if (!this.rawWarning && !cmd) {\n            throw new Error('readWithTypescript called without rawWarning or val!');\n        }\n        switch (cmd) {\n            case 'fullday': {\n                const diff = new Date(this.starttime).getTime() - new Date(this.endtime).getTime();\n                if (diff > 86700000 || diff < 86100000 || !(new Date(this.starttime).getHours() <= 3)) {\n                    return '';\n                }\n                data = this.starttime;\n            }\n            // eslint-disable-next-line\n            case 'dayoftheweek': {\n                return new Date(data as string | number | Date).toLocaleDateString(this.library.getLocalLanguage(), {\n                    weekday: 'long',\n                });\n            }\n            case 'dayoftheweekshort': {\n                return new Date(data as string | number | Date).toLocaleDateString(this.library.getLocalLanguage(), {\n                    weekday: 'short',\n                });\n            }\n            case 'translate': {\n                return this.library.getTranslation(data);\n            }\n            case 'countdown': {\n                return this.getCountdown(data, 'full');\n            }\n            case 'countdownhours': {\n                return this.getCountdown(data, 'hours');\n            }\n            case 'countdownminutes': {\n                return this.getCountdown(data, 'minutes');\n            }\n            case 'countdownfuture': {\n                return this.getCountdown(data, 'future');\n            }\n            case 'geticon': {\n                const id = MessageType.genericWarntyp[this.genericType].id;\n                const color = this.adapter.config.icon_color || 'blue';\n                if (this.adapter.config.icons_prefix && this.adapter.config.icons_suffix) {\n                    return this.adapter.config.icons_prefix + id + this.adapter.config.icons_suffix;\n                } else if (this.library.fileExistAsync(`icons/${color}/${id}.png`)) {\n                    return `/adapter/${this.adapter.name}/icons/${color}/${id}.png`;\n                }\n                return '';\n            }\n            case 'iconbase64':\n                {\n                    if (\n                        MessageType.warnTypeIconsBase64[this.genericType] !== undefined &&\n                        typeof MessageType.warnTypeIconsBase64[this.genericType] === 'string'\n                    ) {\n                        return `${MessageType.warnTypeIconsBase64[this.genericType]}`;\n                    }\n                    return '';\n                }\n                break;\n            case 'getEmoji':\n                {\n                    if (\n                        MessageType.genericWarntyp[this.genericType] !== undefined &&\n                        typeof MessageType.genericWarntyp[this.genericType].emoji === 'string'\n                    ) {\n                        return `${MessageType.genericWarntyp[this.genericType].emoji}`;\n                    }\n                    return '';\n                }\n                break;\n            case 'daytime': {\n                const hour = new Date(data).getHours();\n                let daytime: MessageType.daytimesType = 'noon';\n                for (const a in MessageType.daytimes) {\n                    daytime = a as MessageType.daytimesType;\n                    const opt = MessageType.daytimes[daytime];\n                    if (opt.start < opt.end) {\n                        if (opt.start <= hour && opt.end > hour) {\n                            break;\n                        }\n                    } else {\n                        if (opt.start <= hour || opt.end > hour) {\n                            break;\n                        }\n                    }\n                }\n                return this.library.getTranslation(daytime);\n            }\n            case 'adverb': {\n                const day = new Date(new Date(Date.now()).setHours(0, 0, 0, 0)).getTime(); //86400000;\n                let rest = (new Date(data).getTime() - day) / 86400000;\n                rest = Math.floor(rest);\n                for (const a in MessageType.temporalAdverbs) {\n                    const o = MessageType.temporalAdverbs[a as keyof typeof MessageType.temporalAdverbs];\n                    if (o == rest) {\n                        return this.library.getTranslation(a);\n                    }\n                }\n                return new Date(data as string | number | Date).toLocaleDateString(this.library.getLocalLanguage(), {\n                    weekday: 'long',\n                });\n            }\n            case 'dwdcolor':\n                {\n                    if (!data) {\n                        return '';\n                    }\n                    const rgb = data.split(' ');\n                    if (rgb && rgb.length == 3) {\n                        return `#${`00${Number(rgb[0]).toString(16)}`.slice(\n                            -2,\n                        )}${`00${Number(rgb[1]).toString(16)}`.slice(\n                            -2,\n                        )}${`00${Number(rgb[2]).toString(16)}`.slice(-2)}`;\n                    }\n                }\n                break;\n            case 'warningcount':\n                {\n                    return this.adapter.providerController!.activeMessages;\n                }\n                break;\n            default: {\n                const _exhaustiveCheck: never = cmd;\n                return _exhaustiveCheck;\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Update the raw warning data and then update the formated data as well.\n     *\n     * @param data - The new raw warning data\n     */\n    async updateData(data: object): Promise<void> {\n        this.rawWarning = data;\n        this.notDeleted = true;\n        await this.updateFormated();\n    }\n\n    /**\n     * Resets the state of the message by marking it as not new and not deleted.\n     */\n    silentUpdate(): void {\n        this.newMessage = false;\n        this.notDeleted = true;\n    }\n\n    /**\n     * Calculate the time difference between the given time and now.\n     *\n     * @param time - The time to calculate the difference from\n     * @param typ - The type of countdown to return\n     *  - 'minutes': The number of minutes until the time\n     *  - 'hours': The number of hours until the time, including days\n     *  - 'full': A string in the format `'-DD:HH:MM'` or `'+DD:HH:MM'`\n     *  - 'future': `'-1'` if the time is in the past, `'1'` if the time is in the future\n     * @returns The calculated countdown\n     */\n    getCountdown(time: number, typ: 'minutes' | 'hours' | 'full' | 'future'): string {\n        const diff = time - Date.now();\n        const remain = new Date(Math.abs(diff));\n        const d = remain.getUTCDate() - 1;\n\n        switch (typ) {\n            case 'future':\n                return diff < 0 ? '-1' : '1';\n            case 'minutes':\n                return String(remain.getUTCMinutes());\n            case 'hours':\n                return String(d * 24 + remain.getUTCHours());\n            case 'full': {\n                const h = d > 0 ? `00${String(remain.getUTCHours())}`.slice(2) : String(remain.getUTCHours());\n                return `${diff < 0 ? '-' : ''}${d > 0 ? `${String(d)}:` : ''}${h}:${`00${String(remain.getUTCMinutes())}`.slice(\n                    -2,\n                )}`;\n            }\n        }\n    }\n\n    /**\n     * Delete the message and remove it from the list of active messages.\n     *\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    async delete(): Promise<void> {\n        await super.delete();\n        this.rawWarning = undefined;\n        this.formatedData = undefined;\n        this.notDeleted = false;\n        this.newMessage = false;\n        this.updated = false;\n    }\n\n    /**\n     * Writes the formated warning keys to the state `*.formatedKeys.*`\n     *\n     * @param index The index of the message in the list of active messages\n     * @returns A promise that resolves when the write is complete\n     */\n    async writeFormatedKeys(index: number): Promise<void> {\n        if (this.notDeleted) {\n            if (this.provider) {\n                await this.library.writeFromJson(\n                    `${this.provider.name}.formatedKeys.${`00${index.toString()}`.slice(-2)}`,\n                    `allService.formatedkeys`,\n                    statesObjectsWarnings,\n                    this.formatedData,\n                );\n            } else if (this.providerParent) {\n                await this.library.writeFromJson(\n                    `${this.providerParent.name}.formatedKeys.${`00${index.toString()}`.slice(-2)}`,\n                    `allService.formatedkeys`,\n                    statesObjectsWarnings,\n                    this.formatedData,\n                );\n            }\n        }\n    }\n    /**\n     * Adds a formatted definition to the JSONata definitions map.\n     *\n     * @param key - The key under which the formatted definition will be stored.\n     * @param arg - The formatted definition to be added. If undefined, the function returns immediately.\n     */\n    addFormatedDefinition(key: keyof customformatedKJDef, arg: customFormatedKDefSub | undefined): void {\n        if (arg === undefined) {\n            return;\n        }\n        if (!this.formatedKeysJsonataDefinition) {\n            this.formatedKeysJsonataDefinition = {};\n        }\n        this.formatedKeysJsonataDefinition[key] = arg;\n    }\n}\n"],
  "mappings": "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",
  "names": ["data", "json", "temp"]
}
