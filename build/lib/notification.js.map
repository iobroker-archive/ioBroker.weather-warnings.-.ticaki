{
  "version": 3,
  "sources": ["../../src/lib/notification.ts"],
  "sourcesContent": ["import type WeatherWarnings from '../main';\nimport { genericStateObjects } from './def/definition';\nimport * as NotificationType from './def/notificationService-def';\nimport * as library from './library';\nimport type * as Provider from './def/provider-def';\nimport { filterWarntype } from './def/messages-def';\n\n/**\n * Represents a notification class.\n */\nexport class NotificationClass extends library.BaseClass {\n    options: NotificationType.BaseType;\n    takeThemAll = false;\n    providerDB: any;\n    removeAllSend: boolean = true;\n\n    //clearAll(): void {}\n\n    /**\n     * Creates a new notification class.\n     *\n     * @param adapter The adapter instance.\n     * @param notifcationOptions The options for the notification service.\n     */\n    constructor(adapter: WeatherWarnings, notifcationOptions: NotificationType.BaseType) {\n        super(adapter, notifcationOptions.name);\n\n        this.options = notifcationOptions;\n        this.options = Object.assign(this.options, NotificationType.serciceCapabilities[notifcationOptions.name]);\n        this.log.info(\n            `Create notification service ${this.name}${\n                this.options.adapter != undefined\n                    ? this.name == 'alexa2'\n                        ? ` state: ${this.adapter.config.alexa2_device_ids\n                              .map(a => `${this.options.adapter}.Echo-Devices.${a}.Commands.speak`)\n                              .join(', ')}`\n                        : ` adapter: ${this.options.adapter}`\n                    : ''\n            }.`,\n        );\n        this.log.setLogPrefix(this.options.adapter != undefined ? this.options.adapter : this.name);\n    }\n\n    /**\n     * Initialisiere class - create channel, states etc\n     */\n    async init(): Promise<void> {\n        switch (this.name as NotificationType.Type) {\n            case 'history':\n            case 'json':\n                {\n                    let dp = '';\n                    let def: any = genericStateObjects.history;\n                    const providers = this.adapter.providerController!.providers.filter(a =>\n                        this.options.service.includes(a.service),\n                    );\n                    if (this.adapter.providerController) {\n                        const targets = [...providers, this.adapter.providerController];\n                        for (const a of targets) {\n                            switch (this.options.name as NotificationType.Type) {\n                                case 'history':\n                                    {\n                                        dp = `${a.name}.history`;\n                                        def = genericStateObjects.history;\n                                    }\n                                    break;\n                                case 'json':\n                                    {\n                                        dp = `${a.name}.activeWarnings_json`;\n                                        def = genericStateObjects.activeWarningsJson;\n                                    }\n                                    break;\n                            }\n                            const state = this.adapter.library.readdp(dp);\n                            if (state == undefined) {\n                                await this.adapter.library.writedp(dp, '[]', def);\n                            }\n                        }\n                    }\n                }\n                break;\n        }\n    }\n\n    /**\n     * Sends notifications based on the `allowActions` array.\n     *\n     * @param providers - The providers to get messages from.\n     * @param allowActions - The actions that are allowed to be sent.\n     * @param manual - If true, sends all messages, otherwise only sends messages that have changed.\n     */\n    async sendMessage(\n        providers: Provider.BaseProvider[],\n        allowActions: NotificationType.ActionsUnionType[],\n        manual: boolean = false,\n    ): Promise<void> {\n        if (!manual && !this.allowSending()) {\n            this.log.debug('Sending the notification is not allowed.');\n            return;\n        }\n        let activeWarnings = 0;\n        const filter = manual && this.options.filter.manual ? this.options.filter.manual : this.options.filter.auto;\n        const actions = this.options.actions;\n        let result: NotificationType.MessageType[] = [];\n        const notifications = this.options.notifications;\n        for (const a of providers) {\n            if (this.options.service.indexOf(a.service) == -1) {\n                continue;\n            }\n\n            for (const message of a.messages) {\n                if (\n                    message &&\n                    (filter.level === undefined || filter.level <= message.level) &&\n                    !filterWarntype(a.service, filter.type, message.type)\n                ) {\n                    if (message.notDeleted) {\n                        activeWarnings++;\n                    }\n                    for (const c in actions) {\n                        const action: keyof NotificationType.ActionsType = c as keyof NotificationType.ActionsType;\n                        if (manual && NotificationType.manual.indexOf(action) == -1) {\n                            continue;\n                        }\n                        if (action == undefined || actions[action] == 'none' || actions[action] == '') {\n                            continue;\n                        }\n\n                        if (!allowActions.includes(action)) {\n                            continue;\n                        }\n\n                        if (!notifications.includes(action)) {\n                            continue;\n                        }\n\n                        const templateKey = actions[action];\n                        if (!templateKey || templateKey == 'none') {\n                            continue;\n                        }\n                        if (action == 'removeAll') {\n                            continue;\n                        }\n                        // hier sollte nur 1 Warnungen durch gehen\n                        if (\n                            manual || // get every message\n                            (action == 'new' && message.newMessage) || // new message\n                            (action == 'remove' && !message.notDeleted) || // remove message\n                            action == 'manualAll' ||\n                            (action == 'all' &&\n                                // bei Diensten mit all sollten keine neuen oder entfernten nachrichten bei all durchlaufen.\n                                notifications.includes('all') &&\n                                !(notifications.includes('new') && message.newMessage) &&\n                                !(notifications.includes('remove') && !message.notDeleted))\n                        ) {\n                            const msg = await message.getMessage(templateKey, this);\n                            if (msg.text != '') {\n                                msg.action = action;\n                                msg.provider = a;\n                                msg.message = message;\n                                if (\n                                    notifications.includes('title') &&\n                                    actions.title !== undefined &&\n                                    actions.title !== 'none'\n                                ) {\n                                    const title = await message.getMessage(actions.title, this);\n                                    msg.title = title.text;\n                                }\n                                result.push(msg); // hier sammele die Nachrichten\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // \u00FCberpr\u00FCfe ob die all mit new/remove Ver\u00E4nderungen enth\u00E4lt au\u00DFer bei manutellen dann sortieren.\n        if (notifications.includes('all') && notifications.includes('new') && notifications.includes('remove')) {\n            let sendthem = manual;\n            if (!sendthem) {\n                for (const msg of result) {\n                    if (msg.message && (msg.message.newMessage || !msg.message.notDeleted)) {\n                        sendthem = true;\n                        break;\n                    }\n                }\n            }\n            if (!sendthem) {\n                result = [];\n            } else {\n                result.sort((a, b) => {\n                    if (!a.message) {\n                        return 1;\n                    }\n                    if (!b.message) {\n                        return -1;\n                    }\n                    if (\n                        (a.message.newMessage && b.message.newMessage) ||\n                        (!a.message.notDeleted && !b.message.notDeleted)\n                    ) {\n                        return a.startts == b.startts ? 0 : a.startts < b.startts ? -1 : 1;\n                    }\n                    if (a.message.newMessage) {\n                        return -1;\n                    }\n                    if (b.message.newMessage) {\n                        return 1;\n                    }\n                    if (!a.message.notDeleted) {\n                        return -1;\n                    }\n                    if (!b.message.notDeleted) {\n                        return 1;\n                    }\n                    return a.startts == b.startts ? 0 : a.startts < b.startts ? -1 : 1;\n                });\n            }\n        }\n        if (result.length > 0 && (activeWarnings > 0 || !notifications.includes('removeAll'))) {\n            await this.sendNotifications(result); // hier an alle\n            this.removeAllSend = false;\n        } else {\n            // no active Warnings every where, notification filter dont care.\n\n            if (\n                (!manual &&\n                    this.options.notifications.includes('removeAll') &&\n                    this.options.actions.removeAll != 'none' &&\n                    allowActions.includes('removeAll') &&\n                    !this.removeAllSend &&\n                    activeWarnings == 0) ||\n                (this.options.notifications.includes('removeManualAll') &&\n                    this.options.actions.removeManualAll &&\n                    this.options.actions.removeManualAll != 'none' &&\n                    allowActions.includes('removeAll') &&\n                    manual)\n            ) {\n                const templates = this.adapter.config.templateTable;\n                const tempid = templates.findIndex(\n                    a => a.templateKey == this.options.actions[manual ? 'removeManualAll' : 'removeAll'],\n                );\n                if (tempid != -1) {\n                    const result = await this.adapter.providerController!.noWarning.getMessage(\n                        this.options.actions[manual ? 'removeManualAll' : 'removeAll']!,\n                        this,\n                    );\n                    const msg: NotificationType.MessageType[] = [\n                        {\n                            text: result.text, // templates[tempid].template.replaceAll('\\\\}', '}'),\n                            startts: result.startts,\n                            template: result.template,\n                            action: result.action,\n                        },\n                    ];\n                    const res: NotificationType.MessageType | null =\n                        this.options.actions.title &&\n                        this.options.actions.title != 'none' &&\n                        templates.findIndex(a => a.templateKey == this.options.actions.title) != -1\n                            ? await this.adapter.providerController!.noWarning.getMessage(\n                                  this.options.actions.title,\n                                  this,\n                              )\n                            : null;\n                    if (res !== null && res.text) {\n                        msg[0].title = res.text;\n                    }\n                    await this.sendNotifications(msg);\n                }\n                this.removeAllSend = true;\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given notification service is allowed to send notifications.\n     *\n     * For some services like alexa2 and sayit, the result of `isSpeakAllowed` is used.\n     * For all other services, always true is returned.\n     */\n    allowSending(): boolean {\n        switch (this.options.name) {\n            case 'telegram':\n            case 'gotify':\n            case 'pushover':\n            case 'whatsapp':\n            case 'json':\n            case 'history':\n            case 'email':\n                break;\n            case 'sayit':\n            case 'alexa2': {\n                // silentTime\n                return this.adapter.providerController!.isSpeakAllowed();\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Checks if the given notification service is allowed to send manual messages.\n     *\n     * A notification service is allowed to send manual messages if its configuration\n     * includes at least one of the following actions: 'manualAll', 'removeManualAll'.\n     *\n     * @returns true if the given notification service is allowed to send manual messages, false otherwise.\n     */\n    canManual(): boolean {\n        if (this.options.notifications.findIndex(a => NotificationType.manual.indexOf(a) != -1) != -1) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Goes through all messages and removes unwanted information from sayit and alexa2 messages.\n     * This function is used to clean up the messages before sending them to the user.\n     *\n     * @param messages The array of messages to clean up.\n     * @returns The cleaned up messages.\n     */\n    cleanupMessage(messages: NotificationType.MessageType[]): NotificationType.MessageType[] {\n        for (const message of messages) {\n            if (message === null || message == undefined) {\n                continue;\n            }\n            switch (this.options.name) {\n                case 'telegram':\n                case 'gotify':\n                case 'pushover':\n                case 'whatsapp':\n                case 'json':\n                case 'history':\n                case 'email':\n                    break;\n                case 'sayit':\n                case 'alexa2': {\n                    switch (this.library.language) {\n                        case 'en':\n                        case 'ru':\n                        case 'pt':\n                        case 'nl':\n                        case 'fr':\n                        case 'it':\n                        case 'es':\n                        case 'pl':\n                        case 'zh-cn':\n                        case 'uk':\n                        case 'de':\n                            {\n                                message.text = message.text.replace(/\\([0-9]+.m\\/s, [0-9]+.kn, Bft.[0-9]+../g, '');\n                                message.text = message.text.replace(/\u00B0C/g, this.library.getTranslation('celsius'));\n                                message.text = message.text.replace(/km\\/h/g, this.library.getTranslation('kmh'));\n                                message.text = message.text.replace(/l\\/m\u00B2/g, this.library.getTranslation('lm'));\n                                message.text = message.text.replace(/ [a-zA-Z][a-zA-Z], \\d{1,2}\\.\\d{1,2}\\.\\d{4} /g, x =>\n                                    this.library.convertSpeakDate(x, this.options.name, true),\n                                );\n                                /* message.text = message.text.replace(/\\d{1,2}\\.\\d{1,2}\\... /gi, (x) =>\n                                        this.library.convertSpeakDate(x),\n                                );*/\n                                message.text = message.text.replace(/\\\\+n/g, '');\n                                // insert ;\n                                // with endless protection\n                                let count = 0;\n                                let pos = 250;\n                                while (pos <= message.text.length && count++ < 50) {\n                                    const oldpos = pos;\n                                    pos = message.text.lastIndexOf(';', oldpos);\n                                    if (pos == -1 || pos == oldpos - 250) {\n                                        pos = message.text.lastIndexOf('.', oldpos);\n                                    }\n                                    if (pos == -1) {\n                                        pos = message.text.lastIndexOf(' ', oldpos);\n                                    }\n                                    if (pos == -1) {\n                                        break;\n                                    }\n                                    message.text = `${message.text.slice(0, pos)};${message.text.slice(pos + 1)}`;\n                                    pos += 250;\n                                }\n                            }\n                            break;\n                    }\n                }\n            }\n        }\n        return messages;\n    }\n\n    /**\n     * @description Send notifications based on the settings of the adapter\n     * @param  messages - The messages to be sent.\n     * @returns A promise that resolves to True if the sending was successful, false if not.\n     * @example\n     * adapter.sendNotifications([\n     *     {\n     *         text: 'Hello World',\n     *     },\n     *     {\n     *         text: 'Hello Universe',\n     *     },\n     * ]);\n     */\n    async sendNotifications(messages: NotificationType.MessageType[]): Promise<boolean> {\n        if (!Array.isArray(messages) || messages.length == 0) {\n            this.log.debug(`no messages`);\n            return false;\n        }\n        // own function\n        messages = this.cleanupMessage(Object.assign([], messages) as NotificationType.MessageType[]);\n\n        switch (this.options.name) {\n            case 'telegram':\n                {\n                    for (const msg of messages) {\n                        const opt: any = { text: msg.text, disable_notification: this.options.withNoSound };\n                        if (this.options.parse_mode != 'none') {\n                            opt.parse_mode = this.options.parse_mode;\n                        }\n                        try {\n                            if (this.options.userid.length > 0 || this.options.chatid.length > 0) {\n                                if (this.options.userid.length > 0) {\n                                    opt.user = this.options.userid;\n                                }\n                                if (this.options.chatid.length > 0) {\n                                    const chatids = this.options.chatid.split(',');\n                                    for (const chatid of chatids) {\n                                        this.adapter.sendTo(this.options.adapter, 'send', {\n                                            ...opt,\n                                            chatId: chatid,\n                                        });\n                                    }\n                                } else {\n                                    this.adapter.sendTo(this.options.adapter, 'send', opt);\n                                }\n                            } else {\n                                this.adapter.sendTo(this.options.adapter, 'send', opt);\n                            }\n                            await library.sleep(20);\n                            this.log.debug(`Send the message: ${msg.text}`);\n                        } catch (error: any) {\n                            if (error.message == 'Timeout exceeded') {\n                                this.log.warn(\n                                    `Error sending a notification: ${this.options.adapter} does not react in the given time.`,\n                                );\n                            } else {\n                                throw error;\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'pushover':\n                {\n                    for (const msg of messages) {\n                        const opt: NotificationType.pushover_options = {\n                            message: msg.text,\n                            sound: this.options.sound || 'none',\n                        };\n                        if (msg.title !== undefined && msg.title != '') {\n                            opt.title = msg.title;\n                        }\n                        if (this.options.priority) {\n                            opt.priority = msg.message ? msg.message.level - 2 : -1;\n                        }\n                        if (this.options.device.length > 0) {\n                            opt.device = this.options.device;\n                        }\n                        // stupid pushover adapter dont callback if he runs into a \"dont do this\"\n                        try {\n                            await this.adapter.sendToAsync(this.options.adapter, 'send', opt, { timeout: 2000 });\n                            this.log.debug(`Send the message: ${msg.text}`);\n                        } catch (error: any) {\n                            if (error.message == 'Timeout exceeded') {\n                                this.log.warn(\n                                    `Error sending a notification: ${this.options.adapter} does not react in the given time.`,\n                                );\n                            } else {\n                                throw error;\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'whatsapp':\n                {\n                    for (const msg of messages) {\n                        if (Array.isArray(msg)) {\n                            return false;\n                        }\n                        const opt: {\n                            text: string;\n                            phone?: string;\n                        } = { text: msg.text };\n                        if (this.options.phonenumber) {\n                            opt.phone = this.options.phonenumber;\n                        }\n                        try {\n                            this.adapter.sendTo(this.options.adapter, 'send', opt);\n                            this.log.debug(`Send the message: ${msg.text}`);\n                        } catch (error: any) {\n                            if (error.message == 'Timeout exceeded') {\n                                this.log.warn(\n                                    `Error sending a notification: ${this.options.adapter} does not react in the given time.`,\n                                );\n                            } else {\n                                throw error;\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'gotify':\n                {\n                    for (const msg of messages) {\n                        if (Array.isArray(msg)) {\n                            return false;\n                        }\n                        const opt: {\n                            message: string;\n                            priority?: number;\n                            title?: string;\n                            contentType: string;\n                        } = { message: msg.text, contentType: this.options.contentType };\n                        if (this.options.priority) {\n                            opt.priority = this.options.priority;\n                        }\n                        if (this.options.actions.title && msg.title) {\n                            opt.title = msg.title;\n                        }\n                        try {\n                            this.adapter.sendTo(this.options.adapter, 'send', opt);\n                            this.log.debug(`Send the message: ${msg.text}`);\n                        } catch (error: any) {\n                            if (error.message == 'Timeout exceeded') {\n                                this.log.warn(\n                                    `Error sending a notification: ${this.options.adapter} does not react in the given time.`,\n                                );\n                            } else {\n                                throw error;\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'alexa2':\n                {\n                    const devices = this.adapter.config.alexa2_device_ids;\n\n                    if (devices.length == 0) {\n                        break;\n                    }\n\n                    let opt = '';\n                    if (this.options.sounds_enabled) {\n                        const prefix = `${this.options.volumen}`;\n                        for (const device of devices) {\n                            for (const msg of messages) {\n                                if (Array.isArray(msg)) {\n                                    continue;\n                                }\n                                let index = -1;\n                                if (msg.message !== undefined && msg.message.notDeleted) {\n                                    index = this.options.sounds.findIndex(\n                                        a => a.warntypenumber == Number(msg.message!.genericType),\n                                    );\n                                } else {\n                                    index = this.options.sounds.findIndex(a => a.warntypenumber == 0);\n                                }\n                                const sound = this.options.sounds[index].sound;\n                                if (sound) {\n                                    opt += `;${sound};${msg.text}`;\n                                } else {\n                                    opt += `;${msg.text}`;\n                                }\n                            }\n                            this.log.debug(`Send to alexa2: ${prefix + opt}`);\n                            if (opt != '') {\n                                await this.adapter.setForeignStateAsync(\n                                    `${this.options.adapter}.Echo-Devices.${device}.Commands.speak`,\n                                    prefix + opt,\n                                );\n                            }\n                        }\n                    } else {\n                        const prefix = `${this.options.volumen}${this.options.audio ? `;${this.options.audio}` : ''}`;\n                        for (const device of devices) {\n                            for (const msg of messages) {\n                                if (Array.isArray(msg)) {\n                                    continue;\n                                }\n                                opt += `;${msg.text}`;\n                            }\n                            this.log.debug(`Send to alexa2: ${prefix + opt}`);\n                            if (opt != '') {\n                                await this.adapter.setForeignStateAsync(\n                                    `${this.options.adapter}.Echo-Devices.${device}.Commands.speak`,\n                                    prefix + opt,\n                                );\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'sayit':\n                {\n                    let d = '';\n                    const prefix = `${this.options.volumen};`;\n                    for (const msg of messages) {\n                        if (Array.isArray(msg)) {\n                            continue;\n                        }\n                        if (msg.text != '') {\n                            await this.adapter.setForeignStateAsync(\n                                `${this.options.adapter}.tts.text`,\n                                prefix + msg.text,\n                            );\n                            d += prefix + msg.text;\n                        }\n                    }\n                    this.log.debug(`Send to sayit: ${d}`);\n                }\n                break;\n            case 'history':\n                {\n                    for (const msg of messages) {\n                        if (Array.isArray(msg)) {\n                            return false;\n                        }\n                        if (!msg || !msg.provider || !this.adapter.config.history_Enabled || !msg.message) {\n                            return false;\n                        }\n                        let newMsg: any = { message: msg.text };\n                        if (this.adapter.config.history_allinOne) {\n                            newMsg = { ...msg.message.formatedData, ts: Date.now() };\n                        } else {\n                            try {\n                                const temp = JSON.parse(newMsg.message);\n                                newMsg.message = temp;\n                            } catch {\n                                //all good :)\n                                this.log.debug(` write message: ${newMsg.message}`);\n                            }\n                        }\n                        const targets = [msg.provider.name, msg.provider.providerController.name];\n                        for (const a of targets) {\n                            try {\n                                const dp = `${a}.history`;\n                                const state = this.adapter.library.readdp(dp);\n                                let json: object[] = [];\n                                if (state && state.val && typeof state.val == 'string' && state.val != '') {\n                                    json = JSON.parse(state.val);\n                                }\n                                json.unshift(newMsg);\n                                json.splice(100);\n                                await this.adapter.library.writedp(\n                                    dp,\n                                    JSON.stringify(json),\n                                    genericStateObjects.history,\n                                );\n                            } catch {\n                                this.log.error(\n                                    `${this.name} template has wrong formate. ${this.name} deactivated! template: ${\n                                        msg.action ? this.options.actions[msg.action] : 'unknown'\n                                    }, message: ${JSON.stringify(msg)}`,\n                                );\n                                this.adapter.config.history_Enabled = false;\n                                return false;\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'json':\n                {\n                    // testrun to get a good error\n                    let result: any[] = [];\n                    let providers: string[] = [];\n                    for (const msg of messages) {\n                        try {\n                            try {\n                                const temp = this.adapter.config.json_parse ? JSON.parse(msg.text) : msg.text;\n                                result.push({\n                                    startts: msg.startts,\n                                    message: temp,\n                                    provider: msg.provider,\n                                });\n                            } catch {\n                                const temp = this.adapter.config.json_parse\n                                    ? JSON.parse(msg.text.replace('\u201E', '\"').replace('\u201C', '\"'))\n                                    : msg.text;\n                                result.push({\n                                    startts: msg.startts,\n                                    message: temp,\n                                    provider: msg.provider,\n                                });\n                            }\n                            providers.push(msg.provider !== undefined ? msg.provider.name : '');\n                        } catch {\n                            this.log.error(\n                                `Json template has wrong formate. Conversion deactivated! template: ${msg.template}, message: ${msg.text}`,\n                            );\n                            this.adapter.config.json_parse = false;\n                            continue;\n                        }\n                    }\n                    // double providers\n                    providers = providers.filter((i, p) => {\n                        if (i != '') {\n                            if (providers.indexOf(i) == p) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    });\n                    // double message\n                    result = result.filter((i, p) => {\n                        if (i.message != '' && i.provider) {\n                            if (\n                                result.findIndex(\n                                    i2 => i2.provider.name == i.provider.name && i2.message == i.message,\n                                ) == p\n                            ) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    });\n                    // sort\n                    result.sort((a, b) => {\n                        if (a.provider > b.provider) {\n                            return 1;\n                        } else if (a.provider < b.provider) {\n                            return -1;\n                        }\n                        return a.startts - b.startts;\n                    });\n                    for (const p of providers) {\n                        const dp = `${p}.activeWarnings_json`;\n                        const data = result.filter(a => a.provider && a.provider.name == p).map(a => a.message);\n                        await this.adapter.library.writedp(\n                            dp,\n                            JSON.stringify(data),\n                            genericStateObjects.activeWarningsJson,\n                        );\n                    }\n                    // filter double all\n                    result = result.map(a => a.message);\n                    result =\n                        result.filter((i, p) => {\n                            if (i != '') {\n                                if (result.findIndex(i2 => i2 == i) == p) {\n                                    return true;\n                                }\n                            }\n                            return false;\n                        }) || [];\n                    if (this.adapter.providerController) {\n                        const dp = `${this.adapter.providerController.name}.activeWarnings_json`;\n                        await this.adapter.library.writedp(\n                            dp,\n                            JSON.stringify(result),\n                            genericStateObjects.activeWarningsJson,\n                        );\n                    }\n                }\n                break;\n            case 'email':\n                {\n                    const result = messages.filter((i, p) => {\n                        if (i.text != '') {\n                            if (messages.findIndex(i2 => i2.text == i.text) == p) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    });\n                    const opt: any = {};\n                    if (result.length > 0 && messages.length > 0 && messages[0].title) {\n                        opt.subject = messages[0].title;\n                    }\n                    opt.html = result.map(a => a.text).join(this.adapter.config.email_line_break);\n\n                    // Add recipients if configured\n                    if (this.options.recipients && this.options.recipients.trim().length > 0) {\n                        opt.to = this.options.recipients\n                            .split(',')\n                            .map(email => email.trim())\n                            .filter(email => email.length > 0);\n                    }\n\n                    const templates = this.adapter.config.templateTable;\n                    // das hier ist noch nicht gut, subject sollte vom Nutzer besser bestimmbar sein.\n                    let token = 'message.status.new';\n                    if (messages[0].action == 'removeAll') {\n                        token = 'message.status.clear';\n                    }\n                    if (this.adapter.config.email_Header !== 'none') {\n                        const tempid = templates.findIndex(a => a.templateKey == this.adapter.config.email_Header);\n                        if (tempid != -1) {\n                            const temp = templates[tempid].template.replace(\n                                '${emailheader}',\n                                this.adapter.library.getTranslation(token),\n                            );\n                            opt.html = temp + opt.html;\n                        }\n                    }\n                    if (this.adapter.config.email_Footer !== 'none') {\n                        const tempid = templates.findIndex(a => a.templateKey == this.adapter.config.email_Footer);\n                        if (tempid != -1) {\n                            opt.html = opt.html + templates[tempid].template;\n                        }\n                    }\n                    this.log.debug(`start email sending! Messagecount: ${result.length}`);\n                    try {\n                        this.adapter.sendTo(this.options.adapter, 'send', opt);\n                        this.log.debug(`Send the message: ${JSON.stringify(opt)}`);\n                        await library.sleep(200);\n                    } catch (error: any) {\n                        if (error.message == 'Timeout exceeded') {\n                            this.log.warn(\n                                `Error sending a notification: ${this.options.adapter} does not react in the given time.`,\n                            );\n                        } else {\n                            throw error;\n                        }\n                    }\n                }\n                break;\n        }\n        return true;\n    }\n}\n"],
  "mappings": "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",
  "names": ["result"]
}
